openapi: 3.1.0
info:
  title: PokerHub API
  version: 2.32.0
paths:
  /status:
    get:
      summary: Get service status
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatusResponse'
  /precache-manifest:
    get:
      summary: Retrieve pre-cache manifest
      responses:
        '200':
          description: Asset URLs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrecacheResponse'
  /monitoring:
    post:
      summary: Submit a web vital sample
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebVitalMetric'
      responses:
        '202':
          description: Metric accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitoringAcceptedResponse'
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /nav-icons:
    get:
      summary: List navigation icon metadata
      responses:
        '200':
          description: Navigation icons
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavIconsResponse'
  /admin/nav-icons:
    get:
      summary: List navigation icon metadata
      responses:
        '200':
          description: Navigation icons
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavIconsResponse'
    post:
      summary: Create navigation icon
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NavIcon'
      responses:
        '200':
          description: Created navigation icon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavIcon'
  /admin/nav-icons/{name}:
    put:
      summary: Update navigation icon
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NavIcon'
      responses:
        '200':
          description: Updated navigation icon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavIcon'
    delete:
      summary: Delete navigation icon
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
  /admin/blocked-countries:
    get:
      summary: List blocked countries
      responses:
        '200':
          description: Blocked countries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockedCountriesResponse'
    post:
      summary: Add blocked country
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockedCountry'
      responses:
        '200':
          description: Created blocked country
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockedCountry'
  /admin/blocked-countries/{country}:
    put:
      summary: Update blocked country
      parameters:
        - in: path
          name: country
          required: true
          schema:
            $ref: '#/components/schemas/CountryCode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockedCountry'
      responses:
        '200':
          description: Updated blocked country
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockedCountry'
    delete:
      summary: Remove blocked country
      parameters:
        - in: path
          name: country
          required: true
          schema:
            $ref: '#/components/schemas/CountryCode'
      responses:
        '204':
          description: Removed
  /anti-cheat/flags:
    get:
      summary: List anti-cheat review flags
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Active anti-cheat flags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AntiCheatFlagsResponse'
  /anti-cheat/flags/{id}:
    put:
      summary: Escalate anti-cheat action for a session
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AntiCheatUpdateRequest'
      responses:
        '200':
          description: Updated flag with history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AntiCheatFlag'
        '400':
          description: Invalid escalation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Flag not found
  /anti-cheat/next-action:
    get:
      summary: Determine the next anti-cheat action
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: current
          required: true
          schema:
            $ref: '#/components/schemas/AntiCheatReviewStatus'
      responses:
        '200':
          description: Next escalation step when available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AntiCheatNextActionResponse'
  /nav-items:
    get:
      summary: List navigation items
      responses:
        '200':
          description: Navigation items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavItemsResponse'
  /admin/nav:
    get:
      summary: List navigation items
      responses:
        '200':
          description: Navigation items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavItemsResponse'
    post:
      summary: Create navigation item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NavItemRequest'
      responses:
        '200':
          description: Created navigation item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavItem'
  /admin/nav/{flag}:
    put:
      summary: Update navigation item
      parameters:
        - in: path
          name: flag
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NavItemRequest'
      responses:
        '200':
          description: Updated navigation item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavItem'
    delete:
      summary: Delete navigation item
      parameters:
        - in: path
          name: flag
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
  /site-metadata:
    get:
      summary: Get site metadata
      responses:
        '200':
          description: Site metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteMetadataResponse'
  /history-tabs:
    get:
      summary: List history tabs
      responses:
        '200':
          description: History tabs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoryTabsResponse'
  /settings/chart-palette:
    get:
      summary: Get chart palette colors
      responses:
        '200':
          description: Chart palette colors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartPaletteResponse'
    put:
      summary: Update chart palette colors
      description: Admin only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChartPaletteResponse'
      responses:
        '200':
          description: Updated chart palette colors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartPaletteResponse'
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
        '429':
          description: Too many login attempts
  /auth/register:
    post:
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /auth/logout:
    post:
      summary: Logout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /auth/refresh:
    post:
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid token
  /auth/request-reset:
    post:
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestResetRequest'
      responses:
        '200':
          description: Reset requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /auth/verify-reset-code:
    post:
      summary: Verify reset code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyResetCodeRequest'
      responses:
        '200':
          description: Code verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /auth/reset-password:
    post:
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /auth/providers:
    get:
      summary: List auth providers
      responses:
        '200':
          description: Auth providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthProvidersResponse'

  /transactions/types:
    get:
      summary: List transaction types
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Transaction types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionTypesResponse'
  /transactions/statuses:
    get:
      summary: Get transaction statuses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Transaction statuses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatusesResponse'
  /transactions/columns:
    get:
      summary: Get transaction columns
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Transaction columns
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionColumnsResponse'
  /dashboard/metrics:
    get:
      summary: Get dashboard metrics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardMetricsResponse'
  /notifications:
    get:
      summary: Get notifications
      responses:
        '200':
          description: Notifications list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsResponse'
  /notifications/unread:
    get:
      summary: Get unread notifications count
      responses:
        '200':
          description: Unread count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnreadCountResponse'
  /notifications/mark-all:
    post:
      summary: Mark all notifications as read
      responses:
        '200':
          description: Marked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /notifications/{id}:
    post:
      summary: Mark a notification as read
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Marked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /ctas:
    get:
      summary: Get lobby CTAs
      responses:
        '200':
          description: CTA list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CTA'
    post:
      summary: Create CTA
      description: Admin only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CTA'
      responses:
        '200':
          description: Created CTA
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CTA'
  /ctas/{id}:
    put:
      summary: Update CTA
      description: Admin only
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CTA'
      responses:
        '200':
          description: Updated CTA
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CTA'
  /tables:
    get:
      summary: Get lobby tables
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [active]
      responses:
        '200':
          description: Tables list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
    post:
      summary: Create table
      description: Admin only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTableRequest'
      responses:
        '200':
          description: Created table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
      security:
        - bearerAuth: []
  /tables/sessions:
    get:
      summary: Get tables for authenticated player
      responses:
        '200':
          description: Tables list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
      security:
        - bearerAuth: []
  /tables/{id}:
    get:
      summary: Get table data
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Table data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableData'
        '404':
          description: Table not found
    put:
      summary: Update table
      description: Admin only
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTableRequest'
      security:
        - bearerAuth: []
    delete:
      summary: Delete table
      description: Admin only
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Table deleted
      security:
        - bearerAuth: []

  /tables/{id}/state:
    get:
      summary: Get table state
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Table state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableState'

  /tables/{id}/tabs:
    get:
      summary: Get side panel tabs
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Side panel tabs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableTabsResponse'

  /tables/{id}/chat:
    get:
      summary: Get table chat messages
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
    post:
      summary: Send chat message
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendChatMessageRequest'
      responses:
        '204':
          description: Message sent
        '200':
          description: Updated table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
      security:
        - bearerAuth: []
  /game/action:
    post:
      summary: Perform a game action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameAction'
      responses:
        '200':
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/reserve:
    post:
      summary: Reserve funds in wallet
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Amount'
      responses:
        '200':
          description: Funds reserved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/commit:
    post:
      summary: Commit reserved funds
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Amount'
      responses:
        '200':
          description: Funds committed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/rollback:
    post:
      summary: Roll back reserved funds
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Amount'
      responses:
        '200':
          description: Funds rolled back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/deposit:
    post:
      summary: Deposit funds
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
      responses:
        '200':
          description: Deposit challenge
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/ProviderChallenge'
  /wallet/{id}/deposit/bank-transfer:
    post:
      summary: Initiate bank transfer deposit
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankTransferDepositRequest'
      responses:
        '200':
          description: Deposit reference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankTransferDepositResponse'
  /wallet/{id}/deposit/{depositId}:
    delete:
      summary: Cancel pending deposit
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: depositId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deposit cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/withdraw:
    post:
      summary: Withdraw funds
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawRequest'
      responses:
        '200':
          description: Withdrawal accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/kyc:
    post:
      summary: Trigger KYC verification
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/status:
    get:
      summary: Get wallet status
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Wallet status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletStatusResponse'
  /wallet/{id}/transactions:
    get:
      summary: List wallet transactions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Wallet transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransactionsResponse'
  /wallet/{id}/pending:
    get:
      summary: List pending wallet transactions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pending transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingTransactionsResponse'
  /wallet/iban:
    get:
      summary: Get current deposit IBAN
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current IBAN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IbanResponse'
    post:
      summary: Update deposit IBAN
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IbanUpdateRequest'
      responses:
        '200':
          description: Updated IBAN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IbanResponse'
  /wallet/iban/history:
    get:
      summary: Get IBAN change history
      security:
        - bearerAuth: []
      responses:
        '200':
          description: IBAN change history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IbanHistoryResponse'
  /wallet/provider/callback:
    post:
      summary: Payment provider callback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderCallback'
      responses:
        '200':
          description: Callback processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /withdrawals/{user}/approve:
    post:
      summary: Approve withdrawal
      parameters:
        - in: path
          name: user
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawalDecisionRequest'
      responses:
        '200':
          description: Withdrawal approved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /withdrawals/{user}/reject:
    post:
      summary: Reject withdrawal
      parameters:
        - in: path
          name: user
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawalDecisionRequest'
      responses:
        '200':
          description: Withdrawal rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /tournaments:
    get:
      summary: List tournaments
      responses:
        '200':
          description: Tournaments list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentList'
  /tournaments/filters:
    get:
      summary: Get tournament filter options
      responses:
        '200':
          description: Tournament filter options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentFilters'
  /tournaments/bot-profiles:
    get:
      summary: List bot profiles
      responses:
        '200':
          description: Bot profiles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotProfilesResponse'
  /tournaments/{id}:
    get:
      summary: Get tournament
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tournament detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentDetails'
  /tournaments/{id}/register:
    post:
      summary: Register for tournament
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tournament registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - bearerAuth: []
  /tournaments/{id}/withdraw:
    post:
      summary: Withdraw from tournament
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tournament withdrawal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - bearerAuth: []
  /tournaments/{id}/cancel:
    post:
      summary: Cancel tournament
      description: Admin only
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tournament cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - bearerAuth: []
  /tournaments/{id}/schedule:
    post:
      summary: Schedule tournament
      description: Admin only
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentScheduleRequest'
      responses:
        '200':
          description: Tournament scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - bearerAuth: []
  /tournaments/{id}/prizes:
    post:
      summary: Calculate prize distribution
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculatePrizesRequest'
      responses:
        '200':
          description: Prize distribution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculatePrizesResponse'
      security:
        - bearerAuth: []
  /tournaments/{id}/levels/hot-patch:
    post:
      summary: Hot patch blind level
      description: Admin only
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotPatchLevelRequest'
      responses:
        '200':
          description: Level patched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security:
        - bearerAuth: []
  /leaderboard:
    get:
      summary: Get leaderboard
      responses:
        '200':
          description: Top players
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'
  /leaderboard/ranges:
    get:
      summary: Get leaderboard time ranges
      responses:
        '200':
          description: Available time ranges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardRangesResponse'
  /leaderboard/modes:
    get:
      summary: Get leaderboard modes
      responses:
        '200':
          description: Available modes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardModesResponse'
  /leaderboard/rebuild:
    post:
      summary: Rebuild leaderboard
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: days
          schema:
            type: integer
            maximum: 30
      responses:
        '202':
          description: Rebuild started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /admin/leaderboard-config:
    get:
      summary: List leaderboard config
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Config entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardConfigListResponse'
    post:
      summary: Create leaderboard config entry
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardConfig'
      responses:
        '200':
          description: Updated config entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardConfigListResponse'
    put:
      summary: Update leaderboard config entry
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardConfigUpdate'
      responses:
        '200':
          description: Updated config entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardConfigListResponse'
    delete:
      summary: Delete leaderboard config entry
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardConfig'
      responses:
        '200':
          description: Updated config entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardConfigListResponse'
  /hands/{id}/proof:
    get:
      summary: Get stored RNG proof for a hand
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Commitment, seed, nonce and deck for the hand
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HandProof'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Hand not found

  /hands/proofs:
    get:
      summary: List stored RNG proofs
      parameters:
        - in: query
          name: from
          schema:
            type: integer
            format: int64
        - in: query
          name: to
          schema:
            type: integer
            format: int64
        - in: query
          name: ids
          schema:
            type: string
            description: Comma separated hand IDs
      responses:
        '200':
          description: Proofs for hands
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HandProofs'

  /hands/{id}/log:
    get:
      summary: Export hand log
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hand log entries
          content:
            text/plain:
              schema:
                type: string

  /hands/{id}/replay:
    get:
      summary: Replay hand states
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reconstructed hand states for replay
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HandReplay'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Hand not found

  /hands/{id}/state/{index}:
    get:
      summary: Reconstruct hand state at action index
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: index
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reconstructed hand state
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/GameState'
  /analytics/logs:
    get:
      summary: List system audit logs
      parameters:
        - in: query
          name: search
          required: false
          schema:
            type: string
        - in: query
          name: type
          required: false
          schema:
            $ref: '#/components/schemas/AuditLogType'
        - in: query
          name: user
          required: false
          schema:
            type: string
        - in: query
          name: dateFrom
          required: false
          schema:
            type: string
        - in: query
          name: dateTo
          required: false
          schema:
            type: string
        - in: query
          name: page
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Audit logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogsResponse'
  /analytics/log-types:
    get:
      summary: Get audit log types
      responses:
        '200':
          description: Audit log types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogTypesResponse'
  /analytics/log-types/classes:
    get:
      summary: Get audit log type classes
      responses:
        '200':
          description: Audit log type classes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogTypeClasses'
    post:
      summary: Create an audit log type class override
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogTypeClassOverride'
      responses:
        '201':
          description: Created audit log type class override
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogTypeClassOverride'
  /analytics/log-types/classes/overrides:
    get:
      summary: List stored audit log type class overrides
      responses:
        '200':
          description: Stored audit log type class overrides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogTypeClassOverrideList'
  /analytics/log-types/classes/{type}:
    put:
      summary: Update an audit log type class override
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLogTypeClassOverride'
      responses:
        '200':
          description: Updated audit log type class override
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogTypeClassOverride'
    delete:
      summary: Delete an audit log type class override
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Override removed
  /analytics/summary:
    get:
      summary: Get audit log summary
      responses:
        '200':
          description: Audit log summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditSummaryResponse'
  /analytics/activity:
    get:
      summary: Get player activity data
      responses:
        '200':
          description: Activity data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityResponse'
  /analytics/error-categories:
    get:
      summary: Get error categories data
      responses:
        '200':
          description: Error categories data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCategoriesResponse'
  /analytics/collusion/flagged:
    get:
      summary: List collusion flagged sessions
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/ReviewStatus'
      responses:
        '200':
          description: Flagged sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlaggedSessionsResponse'
  /analytics/collusion/{sessionId}/{action}:
    post:
      summary: Apply collusion review action
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
        - in: path
          name: action
          required: true
          schema:
            $ref: '#/components/schemas/ReviewAction'
      responses:
        '200':
          description: Action applied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewActionLog'
  /analytics/collusion/{sessionId}/audit:
    get:
      summary: Get collusion review action history
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Review action history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewActionLogsResponse'
  /admin/broadcasts:
    get:
      summary: List broadcasts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Broadcast list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastsResponse'
    post:
      summary: Send broadcast
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendBroadcastRequest'
      responses:
        '201':
          description: Broadcast sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Broadcast'
  /broadcast/templates:
    get:
      summary: Get broadcast templates
      responses:
        '200':
          description: Broadcast templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastTemplatesResponse'
  /broadcasts/types:
    get:
      summary: Get broadcast types
      responses:
        '200':
          description: Broadcast types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastTypesResponse'
  /admin/kyc/{id}/denial:
    get:
      summary: Get KYC denial reason
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Denial reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycDenialResponse'
  /admin/deposits:
    get:
      summary: List pending deposits
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Pending deposits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingDepositsResponse'
  /admin/deposits/{id}/confirm:
    post:
      summary: Confirm pending deposit
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deposit confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /admin/deposits/{id}/reject:
    post:
      summary: Reject pending deposit
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositDecisionRequest'
      responses:
        '200':
          description: Deposit rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /admin/deposits/reconcile:
    post:
      summary: Reconcile bank deposits
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankReconciliationRequest'
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
          text/csv:
            schema:
              type: string
      responses:
        '200':
          description: Reconciliation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /admin/audit-logs:
    get:
      summary: Get audit logs
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          required: false
          schema:
            type: string
        - in: query
          name: type
          required: false
          schema:
            $ref: '#/components/schemas/AuditLogType'
        - in: query
          name: user
          required: false
          schema:
            type: string
        - in: query
          name: dateFrom
          required: false
          schema:
            type: string
        - in: query
          name: dateTo
          required: false
          schema:
            type: string
        - in: query
          name: page
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Audit logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogsResponse'
  /admin/audit/log-types:
    get:
      summary: Get audit log types
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Audit log types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogTypesResponse'
  /admin/log-types:
    get:
      summary: Get audit log type classes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Audit log type classes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogTypeClasses'
  /admin/audit-logs/{id}/review:
    post:
      summary: Mark audit log reviewed
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Updated audit log entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogEntry'
  /admin/security-alerts:
    get:
      summary: Get security alerts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Security alerts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityAlertsResponse'
  /admin/security-alerts/{id}/ack:
    post:
      summary: Acknowledge a security alert
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Acknowledged security alert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertItem'
        '404':
          description: Security alert not found
  /admin/events:
    get:
      summary: Get admin events
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminEventsResponse'
  /admin/events/{id}/ack:
    post:
      summary: Acknowledge an admin event
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Admin event acknowledged
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Admin event not found
  /admin/tabs:
    get:
      summary: Get admin dashboard tabs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard tabs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminTabResponse'
    post:
      summary: Create admin dashboard tab
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAdminTabRequest'
      responses:
        '200':
          description: Created admin tab
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminTab'
  /admin/tabs/{id}:
    get:
      summary: Get admin tab metadata
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Admin tab metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminTabMeta'
    put:
      summary: Update admin dashboard tab
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAdminTabRequest'
      responses:
        '200':
          description: Updated admin tab
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminTab'
    delete:
      summary: Delete admin dashboard tab
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Admin tab deleted
  /admin/revenue-breakdown:
    get:
      summary: Get revenue breakdown
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: range
          schema:
            type: string
            enum: [today, week, month, all]
      responses:
        '200':
          description: Revenue breakdown
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevenueBreakdown'
  /admin/wallet/reconcile/mismatches:
    get:
      summary: List wallet reconciliation mismatches
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Wallet reconciliation mismatches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletReconcileMismatchesResponse'
  /admin/wallet/reconcile/mismatches/{account}/ack:
    post:
      summary: Acknowledge wallet reconciliation mismatch
      security:
        - bearerAuth: []
      parameters:
        - name: account
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Mismatch acknowledged
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletReconcileMismatchAcknowledgement'
  /admin/messages:
    get:
      summary: List user messages
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Messages list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminMessagesResponse'
  /admin/messages/{id}/reply:
    post:
      summary: Reply to user message
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyMessageRequest'
      responses:
        '200':
          description: Reply sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /admin/messages/{id}/read:
    post:
      summary: Mark message as read
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Updated message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminMessage'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /admin/users:
    get:
      summary: List users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DashboardUser'
  /admin/users/players:
    get:
      summary: List player ids for filters
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: Player handles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminPlayer'
    post:
      summary: Create user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardUser'
  /admin/users/meta:
    get:
      summary: Get user metadata
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Roles and statuses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMetaResponse'
  /admin/tournaments/formats:
    get:
      summary: List tournament formats
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Available tournament formats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TournamentFormat'
  /admin/tournaments/defaults:
    get:
      summary: Get default tournament values
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default tournament values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminTournament'
  /admin/tournaments/simulate:
    post:
      summary: Simulate tournament durations
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentSimulateRequest'
      responses:
        '200':
          description: Simulation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentSimulateResponse'
  /admin/bonus/options:
    get:
      summary: Get bonus form options
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Bonus options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BonusOptionsResponse'
  /admin/bonus/defaults:
    get:
      summary: Get bonus form defaults
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Bonus defaults
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BonusDefaultsResponse'
  /admin/bonuses:
    get:
      summary: List bonuses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Bonus list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BonusesResponse'
    post:
      summary: Create bonus
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BonusCreateRequest'
      responses:
        '201':
          description: Created bonus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bonus'
  /admin/bonuses/{id}:
    put:
      summary: Update bonus
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BonusUpdateRequest'
      responses:
        '200':
          description: Updated bonus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bonus'
        '404':
          description: Bonus not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
    delete:
      summary: Delete bonus
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Bonus deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /admin/transactions:
    get:
      summary: List transactions
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: playerId
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
        - in: query
          name: startDate
          schema:
            type: string
            format: date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: pageSize
          schema:
            type: integer
      responses:
        '200':
          description: Transactions log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionLogResponse'
  /admin/transactions/tabs:
    get:
      summary: List transaction tabs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Available transaction tabs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionTabsResponse'
  /admin/withdrawals:
    get:
      summary: List pending withdrawals
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Pending withdrawals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingWithdrawalsResponse'
  /admin/withdrawals/{id}/confirm:
    post:
      summary: Confirm pending withdrawal
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Withdrawal confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /admin/withdrawals/{id}/reject:
    post:
      summary: Reject pending withdrawal
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawalDecisionRequest'
      responses:
        '200':
          description: Withdrawal rejected
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/MessageResponse'
  /admin/balance/{userId}:
    post:
      summary: Adjust user balance
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminBalanceRequest'
      responses:
        '200':
          description: Balance adjusted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /user/profile:
    get:
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
  /user/profile/stats:
    get:
      summary: Get profile statistics
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileStatsResponse'
  /me:
    get:
      summary: Get current user avatar
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Avatar URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
  /tiers:
    get:
      summary: Get tier definitions
      responses:
        '200':
          description: Tier definitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TiersResponse'
  /game-types:
    get:
      summary: List game types
      responses:
        '200':
          description: Array of game types with labels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameTypeList'
  /languages:
    get:
      summary: List supported languages
      responses:
        '200':
          description: Array of languages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguagesResponse'
  /translations/{locale}:
    get:
      summary: Get translations for a language
      parameters:
        - in: path
          name: locale
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Translation messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationsResponse'
  /config/chips:
    get:
      summary: List chip denominations
      responses:
        '200':
          description: Chip denominations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChipDenominationsResponse'
    put:
      summary: Update chip denominations
      description: Admin only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChipDenominationsResponse'
      responses:
        '200':
          description: Updated chip denominations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChipDenominationsResponse'
  /config/table-theme:
    get:
      summary: Get table theme
      description: Returns the current table theme mapping
      responses:
        '200':
          description: Table theme mapping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableThemeResponse'
    put:
      summary: Update table theme
      description: Admin only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TableThemeResponse'
      responses:
        '200':
          description: Updated table theme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableThemeResponse'
  /config/default-avatar:
    get:
      summary: Get default avatar
      description: Returns the default avatar URL
      responses:
        '200':
          description: Default avatar URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultAvatarResponse'
    put:
      summary: Update default avatar
      description: Admin only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultAvatarResponse'
      responses:
        '200':
          description: Updated default avatar URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultAvatarResponse'
  /config/performance-thresholds:
    get:
      summary: Get performance thresholds
      description: Returns the performance thresholds used for web vitals
      responses:
        '200':
          description: Performance thresholds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceThresholdsResponse'
  /users:
    post:
      summary: Create user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Username already exists
  /users/{id}:
    get:
      summary: Get user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}/ban:
    post:
      summary: Ban user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanUserRequest'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Banned user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /feature-flags:
    get:
      summary: List feature flags
      responses:
        '200':
          description: Feature flags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlagsResponse'

  /feature-flags/{key}:
    put:
      summary: Set feature flag
      parameters:
        - in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureFlagRequest'
      responses:
        '200':
          description: Flag set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlag'
    delete:
      summary: Delete feature flag
      parameters:
        - in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Flag deleted

  /feature-flags/room/{tableId}/{key}:
    put:
      summary: Set room feature flag
      parameters:
        - in: path
          name: tableId
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureFlagRequest'
      responses:
        '200':
          description: Flag set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlag'
    delete:
      summary: Delete room feature flag
      parameters:
        - in: path
          name: tableId
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Flag deleted

  /feature-flags/tourney/{tourneyId}/{key}:
    put:
      summary: Set tournament feature flag
      parameters:
        - in: path
          name: tourneyId
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureFlagRequest'
      responses:
        '200':
          description: Flag set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlag'
    delete:
      summary: Delete tournament feature flag
      parameters:
        - in: path
          name: tourneyId
          required: true
          schema:
            type: string
        - in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Flag deleted
  /promotions:
    get:
      summary: List promotions
      responses:
        '200':
          description: Promotions list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionsResponse'
  /promotions/{id}:
    get:
      summary: Get promotion by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Promotion detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
  /promotions/{id}/claim:
    post:
      summary: Claim promotion
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Claim result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Promotion not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '409':
          description: Promotion already claimed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    StatusResponse:
      type: object
      properties:
        status:
          type: string
      required:
        - status
    ServiceStatusResponse:
      type: object
      properties:
        status:
          type: string
        contractVersion:
          type: string
      required:
        - status
        - contractVersion
    PrecacheResponse:
      type: array
      items:
        type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    MessageResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    MonitoringAcceptedResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - accepted
      required:
        - status
    WebVitalMetric:
      type: object
      properties:
        name:
          type: string
          enum:
            - CLS
            - FCP
            - FID
            - INP
            - LCP
            - TTFB
        value:
          type: number
          minimum: 0
        overThreshold:
          type: boolean
      required:
        - name
        - value
        - overThreshold
    AntiCheatReviewStatus:
      type: string
      enum:
        - flagged
        - warn
        - restrict
        - ban
    AntiCheatReviewAction:
      type: string
      enum:
        - warn
        - restrict
        - ban
    AntiCheatHistoryEntry:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/AntiCheatReviewAction'
        timestamp:
          type: integer
          format: int64
        reviewerId:
          type: string
      required:
        - action
        - timestamp
        - reviewerId
    AntiCheatFlag:
      type: object
      properties:
        id:
          type: string
        users:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/AntiCheatReviewStatus'
        history:
          type: array
          items:
            $ref: '#/components/schemas/AntiCheatHistoryEntry'
      required:
        - id
        - users
        - status
        - history
    AntiCheatFlagsResponse:
      type: array
      items:
        $ref: '#/components/schemas/AntiCheatFlag'
    AntiCheatUpdateRequest:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/AntiCheatReviewAction'
      required:
        - action
    AntiCheatNextActionResponse:
      type: object
      properties:
        next:
          oneOf:
            - $ref: '#/components/schemas/AntiCheatReviewAction'
            - type: 'null'
    AuthProvider:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        label:
          type: string
      required:
        - name
        - url
        - label
    AuthProvidersResponse:
      type: array
      items:
        $ref: '#/components/schemas/AuthProvider'
    CTA:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        href:
          type: string
        variant:
          type: string
      required:
        - id
        - label
        - href
        - variant
    AdminMessage:
      type: object
      properties:
        id:
          type: integer
        sender:
          type: string
        userId:
          type: string
        avatar:
          type: string
        subject:
          type: string
        preview:
          type: string
        content:
          type: string
        time:
          type: string
        read:
          type: boolean
      required:
        - id
        - sender
        - userId
        - avatar
        - subject
        - preview
        - content
        - time
        - read
    AdminMessagesResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/AdminMessage'
      required:
        - messages
    RevenueStream:
      type: object
      properties:
        label:
          type: string
        pct:
          type: number
        value:
          type: number
      required:
        - label
        - pct
    RevenueBreakdown:
      type: object
      properties:
        currency:
          type: string
          minLength: 3
          maxLength: 3
        streams:
          type: array
          items:
            $ref: '#/components/schemas/RevenueStream'
      required:
        - currency
        - streams
    PromotionBreakdownItem:
      type: object
      properties:
        label:
          type: string
        value:
          type: number
      required:
        - label
        - value
    PromotionProgress:
      type: object
      properties:
        current:
          type: number
        total:
          type: number
        label:
          type: string
        barColorClass:
          type: string
      required:
        - current
        - total
        - label
        - barColorClass
    Promotion:
      type: object
      properties:
        id:
          type: string
        category:
          type: string
        title:
          type: string
        description:
          type: string
        reward:
          type: string
        unlockText:
          type: string
        statusText:
          type: string
        progress:
          $ref: '#/components/schemas/PromotionProgress'
        breakdown:
          type: array
          items:
            $ref: '#/components/schemas/PromotionBreakdownItem'
        eta:
          type: string
      required:
        - id
        - category
        - title
        - description
        - reward
        - breakdown
    PromotionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/Promotion'
    TournamentFormat:
      type: string
      enum: [Regular, Turbo, Deepstack, Bounty, Freeroll]
    ReplyMessageRequest:
      type: object
      properties:
        reply:
          type: string
      required:
        - reply
    AdminTournament:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        gameType:
          type: string
        buyin:
          type: number
        fee:
          type: number
        prizePool:
          type: number
        date:
          type: string
        time:
          type: string
        format:
          $ref: '#/components/schemas/TournamentFormat'
        seatCap:
          oneOf:
            - type: integer
            - type: string
              enum: ['']
        description:
          type: string
        rebuy:
          type: boolean
        addon:
          type: boolean
        status:
          type: string
      required:
        - id
        - name
        - gameType
        - buyin
        - fee
        - prizePool
        - date
        - time
        - format
        - rebuy
        - addon
        - status
    DashboardMetricsResponse:
      type: object
      properties:
        online:
          type: number
        revenue:
          type: number
        activity:
          type: array
          items:
            type: number
        errors:
          type: array
          items:
            type: number
      required:
        - online
        - revenue
        - activity
        - errors
    AuditLogType:
      type: string
    AuditLogEntry:
      type: object
      properties:
        id:
          type: string
        timestamp:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/AuditLogType'
        description:
          type: string
        user:
          type: string
        ip:
          type: string
        reviewed:
          type: boolean
        reviewedBy:
          type: string
          nullable: true
        reviewedAt:
          type: string
          format: date-time
          nullable: true
      required:
        - id
        - timestamp
        - type
        - description
        - user
        - ip
        - reviewed
        - reviewedBy
        - reviewedAt
    AuditLogsResponse:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogEntry'
        total:
          type: integer
      required:
        - logs
        - total
    AuditLogTypesResponse:
      type: object
      properties:
        types:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogType'
      required:
        - types
    LogTypeClasses:
      type: object
      additionalProperties:
        type: string
    LogTypeClassOverride:
      type: object
      properties:
        type:
          type: string
        className:
          type: string
      required:
        - type
        - className
    LogTypeClassOverrideList:
      type: array
      items:
        $ref: '#/components/schemas/LogTypeClassOverride'
    CreateLogTypeClassOverride:
      $ref: '#/components/schemas/LogTypeClassOverride'
    UpdateLogTypeClassOverride:
      type: object
      properties:
        className:
          type: string
      required:
        - className
    AuditSummaryResponse:
      type: object
      properties:
        total:
          type: integer
        errors:
          type: integer
        logins:
          type: integer
      required:
        - total
        - errors
        - logins
    ActivityResponse:
      type: object
      properties:
        labels:
          type: array
          description: labels[i] corresponds to 4-hour increments beginning at midnight
          items:
            type: string
        data:
          type: array
          items:
            type: number
      required:
        - labels
        - data
    ErrorCategoriesResponse:
      type: object
      properties:
        labels:
          type: array
          items:
            type: string
        counts:
          type: array
          items:
            type: number
      required:
        - labels
        - counts
    AlertItem:
      type: object
      properties:
        id:
          type: string
        severity:
          type: string
          enum: [danger, warning]
        title:
          type: string
        body:
          type: string
        time:
          type: string
        resolved:
          type: boolean
      required:
        - id
        - severity
        - title
        - body
        - time
        - resolved
    SecurityAlertsResponse:
      type: array
      items:
        $ref: '#/components/schemas/AlertItem'
    WithdrawalDecisionRequest:
      type: object
      properties:
        comment:
          type: string
      required:
        - comment
    AdminBalanceRequest:
      type: object
      properties:
        action:
          type: string
          enum: [add, remove, freeze]
        amount:
          type: integer
        currency:
          type: string
        notes:
          type: string
      required:
        - action
        - amount
        - currency
    RefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken
    RequestResetRequest:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    VerifyResetCodeRequest:
      type: object
      properties:
        email:
          type: string
        code:
          type: string
      required:
        - email
        - code
    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
        code:
          type: string
        password:
          type: string
      required:
        - email
        - code
        - password
    Amount:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
      required:
        - amount
        - currency
    WithdrawRequest:
      type: object
      properties:
        amount:
          type: number
        deviceId:
          type: string
        currency:
          type: string
      required:
        - amount
        - deviceId
        - currency
    DepositRequest:
      type: object
      properties:
        amount:
          type: number
        deviceId:
          type: string
        currency:
          type: string
      required:
        - amount
        - deviceId
        - currency
    BankTransferDepositRequest:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
        deviceId:
          type: string
        ip:
          type: string
        idempotencyKey:
          type: string
      required:
        - amount
        - currency
        - deviceId
    BankDetails:
      type: object
      properties:
        bankName:
          type: string
        accountNumber:
          type: string
        routingCode:
          type: string
      required:
        - bankName
        - accountNumber
        - routingCode
    BankTransferDepositResponse:
      type: object
      properties:
        reference:
          type: string
        bank:
          $ref: '#/components/schemas/BankDetails'
      required:
        - reference
        - bank
    ProviderChallenge:
      type: object
      properties:
        id:
          type: string
    ProviderCallback:
      type: object
      properties:
        eventId:
          type: string
        idempotencyKey:
          type: string
        providerTxnId:
          type: string
        status:
          type: string
          enum: [approved, risky, chargeback]
      required:
        - eventId
        - idempotencyKey
        - providerTxnId
        - status
    WalletStatusResponse:
      type: object
      properties:
        kycVerified:
          type: boolean
        denialReason:
          type: string
        realBalance:
          type: number
        creditBalance:
          type: number
        currency:
          type: string
          description: ISO 4217 currency code
      required:
        - kycVerified
        - realBalance
        - creditBalance
        - currency
    KycDenialResponse:
      type: object
      properties:
        accountId:
          type: string
        reason:
          type: string
          nullable: true
      required:
        - accountId
    WalletTransaction:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        amount:
          type: number
        currency:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
      required: [id, type, amount, currency, status, createdAt]
    WalletTransactionsResponse:
      type: object
      properties:
        realBalance:
          type: number
        creditBalance:
          type: number
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/WalletTransaction'
      required:
        - realBalance
        - creditBalance
        - transactions
    WalletReconcileMismatch:
      type: object
      properties:
        account:
          type: string
        balance:
          type: number
        journal:
          type: number
        delta:
          type: number
        date:
          type: string
          format: date-time
      required:
        - account
        - balance
        - journal
        - delta
        - date
    WalletReconcileMismatchAcknowledgement:
      type: object
      properties:
        account:
          type: string
        acknowledgedBy:
          type: string
        acknowledgedAt:
          type: string
          format: date-time
      required:
        - account
        - acknowledgedBy
        - acknowledgedAt
    WalletReconcileMismatchesResponse:
      type: object
      properties:
        mismatches:
          type: array
          items:
            $ref: '#/components/schemas/WalletReconcileMismatch'
      required:
        - mismatches
    PendingTransaction:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        amount:
          type: number
        currency:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
      required: [id, type, amount, currency, status, createdAt]
    PendingTransactionsResponse:
      type: object
      properties:
        realBalance:
          type: number
        creditBalance:
          type: number
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/PendingTransaction'
      required:
        - realBalance
        - creditBalance
        - transactions
    PendingDeposit:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        amount:
          type: number
        currency:
          type: string
        reference:
          type: string
        status:
          type: string
          enum: [pending, confirmed, rejected]
        actionRequired:
          type: boolean
        expiresAt:
          type: string
          format: date-time
        avatar:
          type: string
        method:
          type: string
        confirmedBy:
          type: string
        confirmedAt:
          type: string
          format: date-time
        rejectedBy:
          type: string
        rejectedAt:
          type: string
          format: date-time
        rejectionReason:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - amount
        - currency
        - reference
        - status
        - actionRequired
        - expiresAt
        - avatar
        - method
        - createdAt
        - updatedAt
    PendingDepositsResponse:
      type: object
      properties:
        deposits:
          type: array
          items:
            $ref: '#/components/schemas/PendingDeposit'
      required:
        - deposits
    PendingWithdrawal:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        amount:
          type: integer
        currency:
          type: string
        status:
          type: string
          enum: [pending, completed, rejected]
        createdAt:
          type: string
          format: date-time
        avatar:
          type: string
        bank:
          type: string
        maskedAccount:
          type: string
        bankInfo:
          type: string
      required:
        - id
        - userId
        - amount
        - currency
        - status
        - createdAt
        - avatar
        - bank
        - maskedAccount
    PendingWithdrawalsResponse:
      type: object
      properties:
        withdrawals:
          type: array
          items:
            $ref: '#/components/schemas/PendingWithdrawal'
      required:
        - withdrawals
    DepositDecisionRequest:
      type: object
      properties:
        reason:
          type: string
    BankReconciliationEntry:
      type: object
      properties:
        reference:
          type: string
        amount:
          type: integer
      required:
        - reference
        - amount
    BankReconciliationRequest:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/BankReconciliationEntry'
      required:
        - entries
    IbanResponse:
      type: object
      properties:
        iban:
          type: string
        masked:
          type: string
        holder:
          type: string
        instructions:
          type: string
        updatedBy:
          type: string
        updatedAt:
          type: string
          format: date-time
      required:
        - iban
        - masked
        - holder
        - instructions
        - updatedBy
        - updatedAt
    IbanHistoryEntry:
      type: object
      properties:
        date:
          type: string
        oldIban:
          type: string
        newIban:
          type: string
        by:
          type: string
        notes:
          type: string
      required:
        - date
        - oldIban
        - newIban
        - by
        - notes
    IbanHistoryResponse:
      type: object
      properties:
        history:
          type: array
          items:
            $ref: '#/components/schemas/IbanHistoryEntry'
      required:
        - history
    IbanUpdateRequest:
      type: object
      properties:
        iban:
          type: string
        holder:
          type: string
        instructions:
          type: string
        notes:
          type: string
      required:
        - iban
        - holder
        - instructions
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
        avatarKey:
          type: string
      required:
        - username
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
        avatarKey:
          type: string
    BanUserRequest:
      type: object
      properties:
        reason:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        avatarKey:
          type: string
        banned:
          type: boolean
      required:
        - id
        - username
        - banned
    DashboardUser:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        avatarKey:
          type: string
        balance:
          type: integer
        currency:
          type: string
        banned:
          type: boolean
      required:
        - id
        - username
        - balance
        - currency
        - banned
    AdminPlayer:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
      required:
        - id
        - username
    UserRole:
      type: string
      enum:
        - Player
        - Admin
    UserStatus:
      type: string
      enum:
        - Active
        - Frozen
        - Banned
    UserRoleOption:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/UserRole'
        label:
          type: string
      required:
        - value
        - label
    UserStatusOption:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/UserStatus'
        label:
          type: string
      required:
        - value
        - label
    UserMetaResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleOption'
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/UserStatusOption'
      required:
        - roles
        - statuses
    UserProfile:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
        bank:
          type: string
        location:
          type: string
        joined:
          type: string
          format: date-time
        bio:
          type: string
        experience:
          type: number
        balance:
          type: number
      required:
        - username
        - email
        - avatarUrl
        - bank
        - location
        - joined
        - bio
        - experience
        - balance
    MeResponse:
      type: object
      properties:
        avatarUrl:
          type: string
      required:
        - avatarUrl
    ProfileStatsResponse:
      type: object
      properties:
        handsPlayed:
          type: number
        winRate:
          type: number
        tournamentsPlayed:
          type: number
        topThreeRate:
          type: number
      required:
        - handsPlayed
        - winRate
        - tournamentsPlayed
        - topThreeRate
    Tier:
      type: object
      properties:
        name:
          type: string
        min:
          type: integer
        max:
          type: integer
          nullable: true
      required:
        - name
        - min
        - max
    TiersResponse:
      type: array
      items:
        $ref: '#/components/schemas/Tier'
    GameAction:
      oneOf:
        - $ref: '#/components/schemas/PostBlindAction'
        - $ref: '#/components/schemas/BetAction'
        - $ref: '#/components/schemas/RaiseAction'
        - $ref: '#/components/schemas/CallAction'
        - $ref: '#/components/schemas/CheckAction'
        - $ref: '#/components/schemas/FoldAction'
        - $ref: '#/components/schemas/NextAction'
      discriminator:
        propertyName: type
    GameStateDelta:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        tick:
          type: number
        delta:
          type: object
      required: [version, tick, delta]
    PostBlindAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [postBlind]
        tableId:
          type: string
        playerId:
          type: string
        amount:
          type: number
      required: [version, type, tableId, playerId, amount]
    BetAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [bet]
        tableId:
          type: string
        playerId:
          type: string
        amount:
          type: number
      required: [version, type, tableId, playerId, amount]
    RaiseAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [raise]
        tableId:
          type: string
        playerId:
          type: string
        amount:
          type: number
      required: [version, type, tableId, playerId, amount]
    CallAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [call]
        tableId:
          type: string
        playerId:
          type: string
        amount:
          type: number
      required: [version, type, tableId, playerId]
    CheckAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [check]
        tableId:
          type: string
        playerId:
          type: string
      required: [version, type, tableId, playerId]
    FoldAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [fold]
        tableId:
          type: string
        playerId:
          type: string
      required: [version, type, tableId, playerId]
    NextAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [next]
        tableId:
          type: string
      required: [version, type, tableId]
    Tournament:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        gameType:
          $ref: '#/components/schemas/GameType'
        buyIn:
          type: number
        fee:
          type: number
        prizePool:
          type: number
        state:
          type: string
          enum: [REG_OPEN, RUNNING, PAUSED, FINISHED, CANCELLED]
        pko:
          $ref: '#/components/schemas/PkoOptions'
        rebuys:
          $ref: '#/components/schemas/RebuyOptions'
        players:
          type: object
          properties:
            current:
              type: number
            max:
              type: number
          required:
            - current
            - max
        registered:
          type: boolean
      required:
        - id
        - title
        - gameType
        - buyIn
        - prizePool
        - state
        - players
        - registered
    TournamentInfo:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
      required:
        - title
        - description
    TournamentDetails:
      allOf:
        - $ref: '#/components/schemas/Tournament'
        - type: object
          properties:
            registration:
              type: object
              properties:
                open:
                  type: string
                  format: date-time
                  nullable: true
                close:
                  type: string
                  format: date-time
                  nullable: true
            overview:
              type: array
              items:
                $ref: '#/components/schemas/TournamentInfo'
            structure:
              type: array
              items:
                $ref: '#/components/schemas/TournamentInfo'
            prizes:
              type: array
              items:
                $ref: '#/components/schemas/TournamentInfo'
    TournamentList:
      type: array
      items:
        $ref: '#/components/schemas/Tournament'
    TournamentFilter:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
          enum: [active, upcoming, past]
      required: [label, value]
    TournamentFilters:
      type: array
      items:
        $ref: '#/components/schemas/TournamentFilter'
    TournamentSimulateRequest:
      type: object
      properties:
        levels:
          type: integer
        levelMinutes:
          type: integer
        increment:
          type: number
        entrants:
          type: integer
        runs:
          type: integer
      required:
        - levels
        - levelMinutes
        - increment
        - entrants
        - runs
    TournamentSimulateResponse:
      type: object
      properties:
        averageDuration:
          type: number
        durationVariance:
          type: number
      required:
        - averageDuration
        - durationVariance
    BotProfile:
      type: object
      properties:
        name:
          type: string
        proportion:
          type: number
        bustMultiplier:
          type: number
      required:
        - name
        - proportion
        - bustMultiplier
    BotProfilesResponse:
      type: array
      items:
        $ref: '#/components/schemas/BotProfile'
    Table:
      type: object
      properties:
        id:
          type: string
        tableName:
          type: string
        gameType:
          type: string
          enum: [texas, omaha, allin, tournaments]
        stakes:
          type: object
          properties:
            small:
              type: number
            big:
              type: number
          required: [small, big]
        startingStack:
          type: number
        players:
          type: object
          properties:
            current:
              type: number
            max:
              type: number
          required: [current, max]
        buyIn:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
          required: [min, max]
        stats:
          type: object
          properties:
            handsPerHour:
              type: number
            avgPot:
              type: number
            rake:
              type: number
          required: [handsPerHour, avgPot, rake]
        createdAgo:
          type: string
      required:
        - id
        - tableName
        - gameType
        - stakes
        - startingStack
        - players
        - buyIn
        - stats
        - createdAgo
    TableList:
      type: array
      items:
        $ref: '#/components/schemas/Table'
    GameType:
      type: string
      enum: [texas, omaha, allin, tournaments]
    GameTypeWithLabel:
      type: object
      required: [id, label]
      properties:
        id:
          $ref: '#/components/schemas/GameType'
        label:
          type: string
    GameTypeList:
      type: array
      items:
        $ref: '#/components/schemas/GameTypeWithLabel'
    Language:
      type: object
      required: [code, label]
      properties:
        code:
          type: string
        label:
          type: string
    LanguagesResponse:
      type: array
      items:
        $ref: '#/components/schemas/Language'
    TranslationsResponse:
      type: object
      required: [messages]
      properties:
        messages:
          type: object
          additionalProperties:
            type: string
    CountryCode:
      type: string
      pattern: '^[A-Z]{2}$'
      minLength: 2
      maxLength: 2
    BlockedCountry:
      type: object
      required: [country]
      properties:
        country:
          $ref: '#/components/schemas/CountryCode'
    BlockedCountriesResponse:
      type: array
      items:
        $ref: '#/components/schemas/BlockedCountry'
    NavIcon:
      type: object
      required: [name, svg]
      properties:
        name:
          type: string
        svg:
          type: string
    NavIconsResponse:
      type: array
      items:
        $ref: '#/components/schemas/NavIcon'
    NavItem:
      type: object
      required: [flag, href, label, order]
      properties:
        flag:
          type: string
        href:
          type: string
        label:
          type: string
        icon:
          type: string
        order:
          type: integer
    NavItemRequest:
      type: object
      required: [flag, href, label, order]
      properties:
        flag:
          type: string
        href:
          type: string
        label:
          type: string
        icon:
          type: string
        order:
          type: integer
    NavItemsResponse:
      type: array
      items:
        $ref: '#/components/schemas/NavItem'
    SiteMetadataResponse:
      type: object
      required: [title, description, imagePath, defaultAvatar]
      properties:
        title:
          type: string
        description:
          type: string
        imagePath:
          type: string
        defaultAvatar:
          type: string
    HistoryTabItem:
      type: object
      required: [key, label]
      properties:
        key:
          type: string
        label:
          type: string
    HistoryTabsResponse:
      type: object
      required: [tabs]
      properties:
        tabs:
          type: array
          items:
            $ref: '#/components/schemas/HistoryTabItem'
    TabKey:
      type: string
      enum: [history, chat, notes]
    TableTabsResponse:
      type: array
      items:
        $ref: '#/components/schemas/TabKey'
    ChartPaletteResponse:
      type: array
      items:
        type: string
    ChipDenominationsResponse:
      type: object
      required: [denoms]
      properties:
        denoms:
          type: array
          items:
            type: number
          minItems: 1
    TableThemeResponse:
      type: object
      required: [hairline, positions]
      properties:
        hairline:
          type: string
        positions:
          type: object
          additionalProperties:
            type: object
            required: [color, glow]
            properties:
              color:
                type: string
              glow:
                type: string
              badge:
                type: string
    DefaultAvatarResponse:
      type: object
      required: [defaultAvatar]
      properties:
        defaultAvatar:
          type: string
    PerformanceThresholdsResponse:
      type: object
      required: [INP, LCP, CLS]
      properties:
        INP:
          type: number
        LCP:
          type: number
        CLS:
          type: number
    CreateTableRequest:
      type: object
      properties:
        tableName:
          type: string
        gameType:
          type: string
          enum: [texas, omaha, allin, tournaments]
        stakes:
          type: object
          properties:
            small:
              type: number
            big:
              type: number
        startingStack:
          type: number
        players:
          type: object
          properties:
            max:
              type: number
        buyIn:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
      required:
        - tableName
        - gameType
        - stakes
        - startingStack
        - players
        - buyIn
    UpdateTableRequest:
      type: object
      properties:
        tableName:
          type: string
        gameType:
          type: string
          enum: [texas, omaha, allin, tournaments]
        stakes:
          type: object
          properties:
            small:
              type: number
            big:
              type: number
        startingStack:
          type: number
        players:
          type: object
          properties:
            max:
              type: number
        buyIn:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
    Player:
      type: object
      properties:
        id:
          type: number
        username:
          type: string
        avatar:
          type: string
        chips:
          type: number
        committed:
          type: number
        isActive:
          type: boolean
        isFolded:
          type: boolean
        sittingOut:
          type: boolean
        isAllIn:
          type: boolean
        isWinner:
          type: boolean
        timeLeft:
          type: number
        cards:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 2
        pos:
          type: string
        lastAction:
          type: string
      required:
        - id
        - username
        - avatar
        - chips
    ChatMessage:
      type: object
      properties:
        id:
          type: number
        username:
          type: string
        avatar:
          type: string
        text:
          type: string
        time:
          type: string
      required:
        - id
        - username
        - avatar
        - text
        - time
    SendChatMessageRequest:
      type: object
      properties:
        userId:
          type: string
        text:
          type: string
      required:
        - userId
        - text
    TableData:
      type: object
      properties:
        smallBlind:
          type: number
        bigBlind:
          type: number
        pot:
          type: number
        communityCards:
          type: array
          items:
            type: string
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        chatMessages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        stateAvailable:
          type: boolean
      required:
        - smallBlind
        - bigBlind
        - pot
        - communityCards
        - players
        - chatMessages
        - stateAvailable

    TableSeat:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        avatar:
          type: string
        balance:
          type: number
        inHand:
          type: boolean
      required:
        - id
        - name
        - avatar
        - balance
        - inHand

    TableState:
      type: object
      properties:
        handId:
          type: string
        seats:
          type: array
          items:
            $ref: '#/components/schemas/TableSeat'
        pot:
          type: object
          properties:
            main:
              type: number
            sidePots:
              type: array
              items:
                type: number
          required:
            - main
            - sidePots
        street:
          type: string
          enum: [pre, flop, turn, river]
      required:
        - handId
        - seats
        - pot
        - street
    CalculatePrizesRequest:
      type: object
      properties:
        prizePool:
          type: number
        payouts:
          type: array
          items:
            type: number
        bountyPct:
          type: number
        satelliteSeatCost:
          type: number
        method:
          type: string
          enum: [topN, icm]
        stacks:
          type: array
          items:
            type: number
      required:
        - prizePool
        - payouts
  CalculatePrizesResponse:
    type: object
    properties:
      prizes:
        type: array
        items:
          type: number
      bountyPool:
        type: number
      seats:
        type: number
      remainder:
        type: number
    required:
      - prizes
  RebuyOptions:
    type: object
    properties:
      cost:
        type: number
      chips:
        type: number
      threshold:
        type: number
    required: [cost, chips, threshold]
  PkoOptions:
    type: object
    properties:
      bountyPct:
        type: number
    required: [bountyPct]
  TournamentScheduleRequest:
    type: object
    properties:
      startTime:
        type: string
        format: date-time
      registration:
        type: object
        properties:
          open:
            type: string
            format: date-time
          close:
            type: string
            format: date-time
        required:
          - open
          - close
      structure:
        type: array
        items:
          type: object
          properties:
            level:
              type: integer
            durationMinutes:
              type: integer
          required:
            - level
            - durationMinutes
      breaks:
        type: array
        items:
          type: object
          properties:
            start:
              type: string
              format: date-time
            durationMs:
              type: integer
          required:
            - start
            - durationMs
    required:
      - startTime
      - registration
      - structure
  ReviewAction:
    type: string
    enum: [warn, restrict, ban]
  ReviewActionRequest:
    type: object
    properties:
      action:
        $ref: '#/components/schemas/ReviewAction'
    required: [action]
  ReviewStatus:
    type: string
    enum: [flagged, warn, restrict, ban]
  FlaggedSession:
    type: object
    properties:
      id:
        type: string
      users:
        type: array
        items:
          type: string
      status:
        $ref: '#/components/schemas/ReviewStatus'
    required: [id, users, status]
  FlaggedSessionsResponse:
    type: array
    items:
      $ref: '#/components/schemas/FlaggedSession'
  ReviewActionLog:
    type: object
    properties:
      action:
        $ref: '#/components/schemas/ReviewAction'
      timestamp:
        type: integer
      reviewerId:
        type: string
    required: [action, timestamp, reviewerId]
  ReviewActionLogsResponse:
    type: array
    items:
      $ref: '#/components/schemas/ReviewActionLog'
  HotPatchLevelRequest:
    type: object
    properties:
      level:
        type: integer
      smallBlind:
        type: integer
      bigBlind:
        type: integer
    required:
      - level
      - smallBlind
      - bigBlind
  TimeFilter:
    type: string
  ModeFilter:
    type: string
  LeaderboardRangesResponse:
    type: object
    properties:
      ranges:
        type: array
        items:
          $ref: '#/components/schemas/TimeFilter'
    required:
      - ranges
  LeaderboardModesResponse:
    type: object
    properties:
      modes:
        type: array
        items:
          $ref: '#/components/schemas/ModeFilter'
    required:
      - modes
  LeaderboardConfig:
    type: object
    properties:
      range:
        type: string
      mode:
        type: string
    required:
      - range
      - mode
  LeaderboardConfigListResponse:
    type: object
    properties:
      configs:
        type: array
        items:
          $ref: '#/components/schemas/LeaderboardConfig'
    required:
      - configs
  LeaderboardConfigUpdate:
    allOf:
      - $ref: '#/components/schemas/LeaderboardConfig'
      - type: object
        properties:
          newRange:
            type: string
          newMode:
            type: string
        required:
          - newRange
          - newMode
  LeaderboardResponse:
    type: array
    items:
      $ref: '#/components/schemas/LeaderboardEntry'

  LeaderboardEntry:
    type: object
    properties:
      playerId:
        type: string
      rank:
        type: integer
      points:
        type: number
      rd:
        type: number
      volatility:
        type: number
      net:
        type: number
      bb100:
        type: number
      hours:
        type: number
      roi:
        type: number
      finishes:
        type: object
        additionalProperties:
          type: integer
    required:
      - playerId
      - rank
      - points
      - rd
      - volatility
      - net
      - bb100
      - hours
      - roi
      - finishes
  HandProof:
    type: object
    description: Commitment, seed, nonce and deck proving fairness for a hand.
    properties:
      seed:
        type: string
      nonce:
        type: string
      commitment:
        type: string
      deck:
        type: array
        items:
          type: integer
    required:
      - seed
      - nonce
      - commitment
  HandProofs:
    type: array
    items:
      type: object
      properties:
        id:
          type: string
        proof:
          $ref: '#/components/schemas/HandProof'
      required:
        - id
        - proof
  GameStatePlayer:
    type: object
    properties:
      id:
        type: string
      stack:
        type: number
      folded:
        type: boolean
      bet:
        type: number
      allIn:
        type: boolean
      holeCards:
        type: array
        items:
          type: number
        minItems: 2
        maxItems: 2
    required:
      - id
      - stack
      - folded
      - bet
      - allIn
  GameState:
    type: object
    properties:
      version:
        type: string
        enum: ['1']
      tick:
        type: integer
      phase:
        type: string
        enum: [WAIT_BLINDS, DEAL, BETTING_ROUND, SHOWDOWN, SETTLE, NEXT_HAND]
      street:
        type: string
        enum: [preflop, flop, turn, river, showdown]
      pot:
        type: number
      sidePots:
        type: array
        items:
          type: object
          properties:
            amount:
              type: number
            players:
              type: array
              items:
                type: string
            contributions:
              type: object
              additionalProperties:
                type: number
          required:
            - amount
            - players
            - contributions
      currentBet:
        type: number
      players:
        type: array
        items:
          $ref: '#/components/schemas/GameStatePlayer'
      communityCards:
        type: array
        items:
          type: number
    required:
      - version
      - tick
      - phase
      - street
      - pot
      - sidePots
      - currentBet
      - players
      - communityCards

  HandReplayFrame:
    type: object
    properties:
      street:
        type: string
        enum: [preflop, flop, turn, river, showdown]
      pot:
        type: number
      sidePots:
        type: array
        items:
          type: object
          properties:
            amount:
              type: number
            players:
              type: array
              items:
                type: string
            contributions:
              type: object
              additionalProperties:
                type: number
          required:
            - amount
            - players
            - contributions
      currentBet:
        type: number
      players:
        type: array
        items:
          $ref: '#/components/schemas/GameStatePlayer'
      communityCards:
        type: array
        items:
          type: number
    required:
      - street
      - pot
      - sidePots
      - currentBet
      - players
      - communityCards

  HandReplay:
    type: array
    items:
      $ref: '#/components/schemas/HandReplayFrame'
    
    FeatureFlagRequest:
      type: object
      properties:
        value:
          type: boolean
      required:
        - value
    FeatureFlag:
      type: object
      properties:
        key:
          type: string
        value:
          type: boolean
      required:
        - key
        - value
    FeatureFlagsResponse:
      type: object
      additionalProperties:
        type: boolean
    Notification:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        title:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        read:
          type: boolean
      required:
        - id
        - type
        - title
        - message
        - timestamp
        - read
    NotificationsResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
      required:
        - notifications
    UnreadCountResponse:
      type: object
      properties:
        count:
          type: integer
          minimum: 0
      required:
        - count
    BroadcastType:
      type: string
      enum:
        - announcement
        - alert
        - notice
    Broadcast:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/BroadcastType'
        text:
          type: string
        timestamp:
          type: string
          format: date-time
        urgent:
          type: boolean
      required:
        - id
        - type
        - text
        - timestamp
        - urgent
    BroadcastsResponse:
      type: object
      properties:
        broadcasts:
          type: array
          items:
            $ref: '#/components/schemas/Broadcast'
      required:
        - broadcasts
    BroadcastTemplatesResponse:
      type: object
      properties:
        templates:
          type: object
          properties:
            maintenance:
              type: string
            tournament:
              type: string
          required:
            - maintenance
            - tournament
      required:
        - templates
    BroadcastTypeInfo:
      type: object
      properties:
        icon:
          type: string
        color:
          type: string
      required:
        - icon
        - color
    BroadcastTypesResponse:
      type: object
      properties:
        types:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BroadcastTypeInfo'
      required:
        - types
    SendBroadcastRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/BroadcastType'
        text:
          type: string
        urgent:
          type: boolean
        sound:
          type: boolean
      required:
        - type
        - text
        - urgent
        - sound
    TransactionType:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
      required:
        - id
        - label
    TransactionTypesResponse:
      type: array
      items:
        $ref: '#/components/schemas/TransactionType'
    TransactionStatusInfo:
      type: object
      properties:
        label:
          type: string
        style:
          type: string
      required:
        - label
        - style
    TransactionStatusesResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TransactionStatusInfo'
    TransactionColumn:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
      required:
        - id
        - label
    TransactionColumnsResponse:
      type: array
      items:
        $ref: '#/components/schemas/TransactionColumn'
    TransactionTab:
      type: object
      properties:
        id:
          type: string
          enum:
            - all
            - deposits
            - withdrawals
            - manual
        label:
          type: string
      required:
        - id
        - label
    TransactionTabsResponse:
      type: array
      items:
        $ref: '#/components/schemas/TransactionTab'
    TransactionLogEntry:
      type: object
      properties:
        datetime:
          type: string
        action:
          type: string
        amount:
          type: number
        by:
          type: string
        notes:
          type: string
        status:
          type: string
      required:
        - datetime
        - action
        - amount
        - by
        - notes
        - status
    TransactionLogResponse:
      type: array
      items:
        $ref: '#/components/schemas/TransactionLogEntry'
    SidebarItem:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        icon:
          type: string
          description: Font Awesome icon name (e.g., faUsers)
        component:
          type: string
        path:
          type: string
        disabled:
          type: boolean
    SidebarItemsResponse:
      type: array
      items:
        $ref: '#/components/schemas/SidebarItem'
    SidebarTab:
      type: string
    AdminTab:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SidebarTab'
        title:
          type: string
        component:
          type: string
        icon:
          type: string
          description: Normalized Font Awesome icon name (e.g., faUsers)
        source:
          type: string
          enum: [config, database]
      required:
        - id
        - title
        - component
    AdminTabResponse:
      type: array
      items:
        $ref: '#/components/schemas/AdminTab'
    AdminTabMeta:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SidebarTab'
        title:
          type: string
        component:
          type: string
        enabled:
          type: boolean
        message:
          type: string
          description: Fallback message shown when the tab is disabled or unavailable
      required:
        - id
        - title
        - component
        - enabled
        - message
    CreateAdminTabRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SidebarTab'
        title:
          type: string
        icon:
          type: string
        component:
          type: string
      required:
        - id
        - title
        - icon
        - component
    UpdateAdminTabRequest:
      type: object
      properties:
        title:
          type: string
        icon:
          type: string
        component:
          type: string
      required:
        - title
        - icon
        - component
    AdminEvent:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        date:
          type: string
      required:
        - id
        - title
        - description
        - date
    AdminEventsResponse:
      type: array
      items:
        $ref: '#/components/schemas/AdminEvent'
    BonusOptionType:
      type: string
      enum:
        - deposit
        - rakeback
        - ticket
        - rebate
        - first-deposit
    BonusEligibility:
      type: string
      enum:
        - all
        - new
        - vip
        - active
    BonusStatus:
      type: string
      enum:
        - active
        - paused
    BonusTypeOption:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/BonusOptionType'
        label:
          type: string
      required:
        - value
        - label
    BonusEligibilityOption:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/BonusEligibility'
        label:
          type: string
      required:
        - value
        - label
    BonusStatusOption:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/BonusStatus'
        label:
          type: string
      required:
        - value
        - label
    BonusOptionsResponse:
      type: object
      properties:
        types:
          type: array
          items:
            $ref: '#/components/schemas/BonusTypeOption'
        eligibilities:
          type: array
          items:
            $ref: '#/components/schemas/BonusEligibilityOption'
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/BonusStatusOption'
      required:
        - types
        - eligibilities
        - statuses
    BonusDefaultsResponse:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
        bonusPercent:
          type: number
        maxBonusUsd:
          type: number
        expiryDate:
          type: string
        eligibility:
          type: string
        status:
          type: string
      required:
        - name
        - type
        - description
        - eligibility
        - status
    Bonus:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          $ref: '#/components/schemas/BonusOptionType'
        description:
          type: string
        bonusPercent:
          type: number
        maxBonusUsd:
          type: number
        expiryDate:
          type: string
          format: date
        eligibility:
          $ref: '#/components/schemas/BonusEligibility'
        status:
          $ref: '#/components/schemas/BonusStatus'
        claimsTotal:
          type: integer
        claimsWeek:
          type: integer
      required:
        - id
        - name
        - type
        - description
        - eligibility
        - status
        - claimsTotal
        - claimsWeek
    BonusesResponse:
      type: array
      items:
        $ref: '#/components/schemas/Bonus'
    BonusCreateRequest:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/BonusOptionType'
        description:
          type: string
        bonusPercent:
          type: number
        maxBonusUsd:
          type: number
        expiryDate:
          type: string
          format: date
        eligibility:
          $ref: '#/components/schemas/BonusEligibility'
        status:
          $ref: '#/components/schemas/BonusStatus'
      required:
        - name
        - type
        - description
        - eligibility
        - status
    BonusUpdateRequest:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/BonusOptionType'
        description:
          type: string
        bonusPercent:
          type: number
        maxBonusUsd:
          type: number
        expiryDate:
          type: string
          format: date
        eligibility:
          $ref: '#/components/schemas/BonusEligibility'
        status:
          $ref: '#/components/schemas/BonusStatus'
