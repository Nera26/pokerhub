openapi: 3.1.0
info:
  title: PokerHub API
  version: 1.2.0
paths:
  /status:
    get:
      summary: Get service status
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatusResponse'
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
        '429':
          description: Too many login attempts
  /auth/logout:
    post:
      summary: Logout
      responses:
        '200':
          description: Logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /auth/request-reset:
    post:
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestResetRequest'
      responses:
        '200':
          description: Reset requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /auth/verify-reset-code:
    post:
      summary: Verify reset code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyResetCodeRequest'
      responses:
        '200':
          description: Code verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /auth/reset-password:
    post:
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /tables:
    get:
      summary: Get lobby tables
      responses:
        '200':
          description: Tables list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
  /tables/{id}:
    get:
      summary: Get table data
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Table data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableData'
  /game/action:
    post:
      summary: Perform a game action
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameAction'
      responses:
        '200':
          description: Action accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/reserve:
    post:
      summary: Reserve funds in wallet
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Amount'
      responses:
        '200':
          description: Funds reserved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/commit:
    post:
      summary: Commit reserved funds
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Amount'
      responses:
        '200':
          description: Funds committed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/rollback:
    post:
      summary: Roll back reserved funds
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Amount'
      responses:
        '200':
          description: Funds rolled back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/withdraw:
    post:
      summary: Withdraw funds
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawRequest'
      responses:
        '200':
          description: Withdrawal accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/kyc:
    post:
      summary: Trigger KYC verification
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /wallet/{id}/status:
    get:
      summary: Get wallet status
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Wallet status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletStatusResponse'
  /wallet/{id}/transactions:
    get:
      summary: List wallet transactions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Wallet transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletTransactionsResponse'
  /wallet/{id}/pending:
    get:
      summary: List pending wallet transactions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pending transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingTransactionsResponse'
  /wallet/provider/callback:
    post:
      summary: Payment provider callback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderCallback'
      responses:
        '200':
          description: Callback processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /tournaments:
    get:
      summary: List tournaments
      responses:
        '200':
          description: Tournaments list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentList'
  /tournaments/{id}/register:
    post:
      summary: Register for tournament
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentRegisterRequest'
      responses:
        '200':
          description: Tournament registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /tournaments/{id}/withdraw:
    post:
      summary: Withdraw from tournament
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentRegisterRequest'
      responses:
        '200':
          description: Tournament withdrawal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /tournaments/{id}/schedule:
    post:
      summary: Schedule tournament
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentScheduleRequest'
      responses:
        '200':
          description: Tournament scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /tournaments/{id}/prizes:
    post:
      summary: Calculate prize distribution
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculatePrizesRequest'
      responses:
        '200':
          description: Prize distribution
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/CalculatePrizesResponse'
  /tournaments/{id}/levels/hot-patch:
    post:
      summary: Hot patch blind level
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HotPatchLevelRequest'
      responses:
        '200':
          description: Level patched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /leaderboard:
    get:
      summary: Get leaderboard
      responses:
        '200':
          description: Top players
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardResponse'
  /leaderboard/rebuild:
    post:
      summary: Rebuild leaderboard
      parameters:
        - in: query
          name: days
          schema:
            type: integer
            maximum: 30
      responses:
        '202':
          description: Rebuild started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /hands/{id}/proof:
    get:
      summary: Get stored RNG proof for a hand
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Commitment, seed and nonce for the hand
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HandProof'
        '404':
          description: Hand not found

  /hands/{id}/log:
    get:
      summary: Export hand log
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hand log entries
          content:
            text/plain:
              schema:
                type: string

  /hands/{id}/state/{actionIndex}:
    get:
      summary: Reconstruct hand state at action index
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: actionIndex
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reconstructed hand state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HandStateResponse'
  /review/sessions:
    get:
      summary: List flagged sessions
      responses:
        '200':
          description: Flagged sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlaggedSessionsResponse'
  /admin/flagged-sessions:
    get:
      summary: List flagged sessions
      responses:
        '200':
          description: Flagged sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlaggedSessionsResponse'
  /analytics/collusion/flagged:
    get:
      summary: List collusion flagged sessions
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/ReviewStatus'
      responses:
        '200':
          description: Flagged sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlaggedSessionsResponse'
  /analytics/collusion/{sessionId}/{action}:
    post:
      summary: Apply collusion review action
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
        - in: path
          name: action
          required: true
          schema:
            $ref: '#/components/schemas/ReviewAction'
      responses:
        '200':
          description: Action applied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /admin/kyc/{id}/denial:
    get:
      summary: Get KYC denial reason
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Denial reason
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KycDenialResponse'
  /review/sessions/{id}/{action}:
    post:
      summary: Apply review action
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: action
          required: true
          schema:
            $ref: '#/components/schemas/ReviewAction'
      responses:
        '200':
          description: Action applied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /users:
    post:
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    put:
      summary: Update user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}/ban:
    post:
      summary: Ban user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BanUserRequest'
      responses:
        '200':
          description: Banned user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}/balance:
    post:
      summary: Adjust user balance
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalanceAdjustmentRequest'
      responses:
        '200':
          description: Updated balance
          content:
            application/json:
              schema:
              $ref: '#/components/schemas/User'

  /feature-flags:
    get:
      summary: List feature flags
      responses:
        '200':
          description: Feature flags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlagsResponse'

  /feature-flags/{key}:
    put:
      summary: Set feature flag
      parameters:
        - in: path
          name: key
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureFlagRequest'
      responses:
        '200':
          description: Flag set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlag'
    delete:
      summary: Delete feature flag
      parameters:
        - in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Flag deleted
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    StatusResponse:
      type: object
      properties:
        status:
          type: string
      required:
        - status
    ServiceStatusResponse:
      type: object
      properties:
        status:
          type: string
        contractVersion:
          type: string
      required:
        - status
        - contractVersion
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    MessageResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    RequestResetRequest:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    VerifyResetCodeRequest:
      type: object
      properties:
        email:
          type: string
        code:
          type: string
      required:
        - email
        - code
    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
        code:
          type: string
        password:
          type: string
      required:
        - email
        - code
        - password
    Amount:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
      required:
        - amount
        - currency
    WithdrawRequest:
      type: object
      properties:
        amount:
          type: number
        deviceId:
          type: string
        currency:
          type: string
      required:
        - amount
        - deviceId
        - currency
    ProviderCallback:
      type: object
      properties:
        eventId:
          type: string
        idempotencyKey:
          type: string
        providerTxnId:
          type: string
        status:
          type: string
          enum: [approved, risky, chargeback]
      required:
        - eventId
        - idempotencyKey
        - providerTxnId
        - status
    WalletStatusResponse:
      type: object
      properties:
        kycVerified:
          type: boolean
        denialReason:
          type: string
        realBalance:
          type: number
        creditBalance:
          type: number
      required:
        - kycVerified
        - realBalance
        - creditBalance
    KycDenialResponse:
      type: object
      properties:
        accountId:
          type: string
        reason:
          type: string
          nullable: true
      required:
        - accountId
    WalletTransaction:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        amount:
          type: number
        currency:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
      required: [id, type, amount, currency, status, createdAt]
    WalletTransactionsResponse:
      type: object
      properties:
        realBalance:
          type: number
        creditBalance:
          type: number
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/WalletTransaction'
      required:
        - realBalance
        - creditBalance
        - transactions
    PendingTransaction:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        amount:
          type: number
        currency:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
      required: [id, type, amount, currency, status, createdAt]
    PendingTransactionsResponse:
      type: object
      properties:
        realBalance:
          type: number
        creditBalance:
          type: number
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/PendingTransaction'
      required:
        - realBalance
        - creditBalance
        - transactions
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
        avatarKey:
          type: string
      required:
        - username
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
        avatarKey:
          type: string
    BanUserRequest:
      type: object
      properties:
        reason:
          type: string
    BalanceAdjustmentRequest:
      type: object
      properties:
        amount:
          type: number
      required:
        - amount
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        avatarKey:
          type: string
        banned:
          type: boolean
        balance:
          type: number
      required:
        - id
        - username
        - banned
        - balance
    GameAction:
      oneOf:
        - $ref: '#/components/schemas/PostBlindAction'
        - $ref: '#/components/schemas/BetAction'
        - $ref: '#/components/schemas/RaiseAction'
        - $ref: '#/components/schemas/CallAction'
        - $ref: '#/components/schemas/CheckAction'
        - $ref: '#/components/schemas/FoldAction'
        - $ref: '#/components/schemas/NextAction'
      discriminator:
        propertyName: type
    PostBlindAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [postBlind]
        tableId:
          type: string
        playerId:
          type: string
        amount:
          type: number
      required: [version, type, tableId, playerId, amount]
    BetAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [bet]
        tableId:
          type: string
        playerId:
          type: string
        amount:
          type: number
      required: [version, type, tableId, playerId, amount]
    RaiseAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [raise]
        tableId:
          type: string
        playerId:
          type: string
        amount:
          type: number
      required: [version, type, tableId, playerId, amount]
    CallAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [call]
        tableId:
          type: string
        playerId:
          type: string
        amount:
          type: number
      required: [version, type, tableId, playerId]
    CheckAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [check]
        tableId:
          type: string
        playerId:
          type: string
      required: [version, type, tableId, playerId]
    FoldAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [fold]
        tableId:
          type: string
        playerId:
          type: string
      required: [version, type, tableId, playerId]
    NextAction:
      type: object
      properties:
        version:
          type: string
          enum: ['1']
        type:
          type: string
          enum: [next]
        tableId:
          type: string
      required: [version, type, tableId]
    Tournament:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        buyIn:
          type: number
        fee:
          type: number
        prizePool:
          type: number
        pko:
          $ref: '#/components/schemas/PkoOptions'
        rebuys:
          $ref: '#/components/schemas/RebuyOptions'
        players:
          type: object
          properties:
            current:
              type: number
            max:
              type: number
          required:
            - current
            - max
        registered:
          type: boolean
      required:
        - id
        - title
        - buyIn
        - prizePool
        - players
        - registered
    TournamentList:
      type: array
      items:
        $ref: '#/components/schemas/Tournament'
    TournamentRegisterRequest:
      type: object
      properties:
        userId:
          type: string
      required:
        - userId
    Table:
      type: object
      properties:
        id:
          type: string
        tableName:
          type: string
        gameType:
          type: string
          enum: [texas, omaha, allin, tournaments]
        stakes:
          type: object
          properties:
            small:
              type: number
            big:
              type: number
          required: [small, big]
        players:
          type: object
          properties:
            current:
              type: number
            max:
              type: number
          required: [current, max]
        buyIn:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
          required: [min, max]
        stats:
          type: object
          properties:
            handsPerHour:
              type: number
            avgPot:
              type: number
            rake:
              type: number
          required: [handsPerHour, avgPot, rake]
        createdAgo:
          type: string
      required:
        - id
        - tableName
        - gameType
        - stakes
        - players
        - buyIn
        - stats
        - createdAgo
    TableList:
      type: array
      items:
        $ref: '#/components/schemas/Table'
    Player:
      type: object
      properties:
        id:
          type: number
        username:
          type: string
        avatar:
          type: string
        chips:
          type: number
        committed:
          type: number
        isActive:
          type: boolean
        isFolded:
          type: boolean
        sittingOut:
          type: boolean
        isAllIn:
          type: boolean
        isWinner:
          type: boolean
        timeLeft:
          type: number
        cards:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 2
        pos:
          type: string
        lastAction:
          type: string
      required:
        - id
        - username
        - avatar
        - chips
    ChatMessage:
      type: object
      properties:
        id:
          type: number
        username:
          type: string
        avatar:
          type: string
        text:
          type: string
        time:
          type: string
      required:
        - id
        - username
        - avatar
        - text
        - time
    TableData:
      type: object
      properties:
        smallBlind:
          type: number
        bigBlind:
          type: number
        pot:
          type: number
        communityCards:
          type: array
          items:
            type: string
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        chatMessages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
      required:
        - smallBlind
        - bigBlind
        - pot
        - communityCards
        - players
        - chatMessages
    CalculatePrizesRequest:
      type: object
      properties:
        prizePool:
          type: number
        payouts:
          type: array
          items:
            type: number
        bountyPct:
          type: number
        satelliteSeatCost:
          type: number
        method:
          type: string
          enum: [topN, icm]
        stacks:
          type: array
          items:
            type: number
      required:
        - prizePool
        - payouts
  CalculatePrizesResponse:
    type: object
    properties:
      prizes:
        type: array
        items:
          type: number
      bountyPool:
        type: number
      seats:
        type: number
      remainder:
        type: number
    required:
      - prizes
  RebuyOptions:
    type: object
    properties:
      cost:
        type: number
      chips:
        type: number
      threshold:
        type: number
    required: [cost, chips, threshold]
  PkoOptions:
    type: object
    properties:
      bountyPct:
        type: number
    required: [bountyPct]
  TournamentScheduleRequest:
    type: object
    properties:
      startTime:
        type: string
        format: date-time
    required:
      - startTime

    LeaderboardResponse:
      type: array
      items:
        $ref: '#/components/schemas/LeaderboardEntry'
    ReviewAction:
      type: string
      enum: [warn, restrict, ban]
    ReviewActionRequest:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ReviewAction'
      required: [action]
    ReviewStatus:
      type: string
      enum: [flagged, warn, restrict, ban]
    FlaggedSession:
      type: object
      properties:
        id:
          type: string
        users:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/ReviewStatus'
      required: [id, users, status]
    FlaggedSessionsResponse:
      type: array
      items:
        $ref: '#/components/schemas/FlaggedSession'
  HotPatchLevelRequest:
    type: object
    properties:
      level:
        type: integer
      smallBlind:
        type: integer
      bigBlind:
        type: integer
    required:
      - level
      - smallBlind
      - bigBlind
  LeaderboardResponse:
    type: array
    items:
      $ref: '#/components/schemas/LeaderboardEntry'

  LeaderboardEntry:
    type: object
    properties:
      playerId:
        type: string
      rank:
        type: integer
      points:
        type: number
      net:
        type: number
      bb100:
        type: number
      hours:
        type: number
    required:
      - playerId
      - rank
      - points
      - net
      - bb100
      - hours
  HandProof:
    type: object
    description: Commitment, seed and nonce proving deck fairness for a hand.
    properties:
      seed:
        type: string
      nonce:
        type: string
      commitment:
        type: string
    required:
      - seed
      - nonce
      - commitment
  HandStateResponse:
    type: object
    properties:
      street:
        type: string
        enum: [preflop, flop, turn, river, showdown]
      pot:
        type: number
      sidePots:
        type: array
        items:
          type: object
          properties:
            amount:
              type: number
            players:
              type: array
              items:
                type: string
          required:
            - amount
            - players
      currentBet:
        type: number
      players:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            stack:
              type: number
            folded:
              type: boolean
            bet:
              type: number
            allIn:
              type: boolean
          required:
            - id
            - stack
            - folded
            - bet
            - allIn
    required:
      - street
      - pot
      - sidePots
      - currentBet
      - players
    
    FeatureFlagRequest:
      type: object
      properties:
        value:
          type: boolean
      required:
        - value
    FeatureFlag:
      type: object
      properties:
        key:
          type: string
        value:
          type: boolean
      required:
        - key
        - value
    FeatureFlagsResponse:
      type: object
      additionalProperties:
        type: boolean
