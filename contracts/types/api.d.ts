/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/status": {
    /** Get service status */
    get: {
      responses: {
        /** @description Service status */
        200: {
          content: {
            "application/json": components["schemas"]["ServiceStatusResponse"];
          };
        };
      };
    };
  };
  "/auth/login": {
    /** Login */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginRequest"];
        };
      };
      responses: {
        /** @description Logged in */
        200: {
          content: {
            "application/json": components["schemas"]["LoginResponse"];
          };
        };
        /** @description Invalid credentials */
        401: {
          content: never;
        };
        /** @description Too many login attempts */
        429: {
          content: never;
        };
      };
    };
  };
  "/auth/register": {
    /** Register */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginRequest"];
        };
      };
      responses: {
        /** @description Registered */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/auth/logout": {
    /** Logout */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RefreshRequest"];
        };
      };
      responses: {
        /** @description Logged out */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/auth/refresh": {
    /** Refresh access token */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RefreshRequest"];
        };
      };
      responses: {
        /** @description Refreshed */
        200: {
          content: {
            "application/json": components["schemas"]["LoginResponse"];
          };
        };
        /** @description Invalid token */
        401: {
          content: never;
        };
      };
    };
  };
  "/auth/request-reset": {
    /** Request password reset */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RequestResetRequest"];
        };
      };
      responses: {
        /** @description Reset requested */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/auth/verify-reset-code": {
    /** Verify reset code */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["VerifyResetCodeRequest"];
        };
      };
      responses: {
        /** @description Code verified */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/auth/reset-password": {
    /** Reset password */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ResetPasswordRequest"];
        };
      };
      responses: {
        /** @description Password reset */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/dashboard/metrics": {
    /** Get dashboard metrics */
    get: {
      responses: {
        /** @description Dashboard metrics */
        200: {
          content: {
            "application/json": components["schemas"]["DashboardMetricsResponse"];
          };
        };
      };
    };
  };
  "/notifications": {
    /** Get notifications */
    get: {
      responses: {
        /** @description Notifications list */
        200: {
          content: {
            "application/json": components["schemas"]["NotificationsResponse"];
          };
        };
      };
    };
  };
  "/notifications/mark-all": {
    /** Mark all notifications as read */
    post: {
      responses: {
        /** @description Marked */
        200: {
          content: {
            "application/json": components["schemas"]["StatusResponse"];
          };
        };
      };
    };
  };
  "/notifications/{id}": {
    /** Mark a notification as read */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Marked */
        200: {
          content: {
            "application/json": components["schemas"]["StatusResponse"];
          };
        };
      };
    };
  };
  "/tables": {
    /** Get lobby tables */
    get: {
      responses: {
        /** @description Tables list */
        200: {
          content: {
            "application/json": components["schemas"]["Table"][];
          };
        };
      };
    };
    /**
     * Create table
     * @description Admin only
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateTableRequest"];
        };
      };
      responses: {
        /** @description Created table */
        200: {
          content: {
            "application/json": components["schemas"]["Table"];
          };
        };
      };
    };
  };
  "/tables/{id}": {
    /** Get table data */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Table data */
        200: {
          content: {
            "application/json": components["schemas"]["TableData"];
          };
        };
        /** @description Table not found */
        404: {
          content: never;
        };
      };
    };
    /**
     * Update table
     * @description Admin only
     */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateTableRequest"];
        };
      };
    };
    /**
     * Delete table
     * @description Admin only
     */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Table deleted */
        204: {
          content: never;
        };
      };
    };
  };
  "/tables/{id}/chat": {
    /** Get table chat messages */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Chat messages */
        200: {
          content: {
            "application/json": components["schemas"]["ChatMessage"][];
          };
        };
      };
    };
    /** Send chat message */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["SendChatMessageRequest"];
        };
      };
      responses: {
        /** @description Updated table */
        200: {
          content: {
            "application/json": components["schemas"]["Table"];
          };
        };
        /** @description Message sent */
        204: {
          content: never;
        };
      };
    };
  };
  "/game/action": {
    /** Perform a game action */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["GameAction"];
        };
      };
      responses: {
        /** @description Action accepted */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/wallet/{id}/reserve": {
    /** Reserve funds in wallet */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Amount"];
        };
      };
      responses: {
        /** @description Funds reserved */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/wallet/{id}/commit": {
    /** Commit reserved funds */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Amount"];
        };
      };
      responses: {
        /** @description Funds committed */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/wallet/{id}/rollback": {
    /** Roll back reserved funds */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Amount"];
        };
      };
      responses: {
        /** @description Funds rolled back */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/wallet/{id}/deposit": {
    /** Deposit funds */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["DepositRequest"];
        };
      };
      responses: {
        /** @description Deposit challenge */
        200: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/wallet/{id}/deposit/bank-transfer": {
    /** Initiate bank transfer deposit */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BankTransferDepositRequest"];
        };
      };
      responses: {
        /** @description Deposit reference */
        200: {
          content: {
            "application/json": components["schemas"]["BankTransferDepositResponse"];
          };
        };
      };
    };
  };
  "/wallet/{id}/deposit/{depositId}": {
    /** Cancel pending deposit */
    delete: {
      parameters: {
        path: {
          id: string;
          depositId: string;
        };
      };
      responses: {
        /** @description Deposit cancelled */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/wallet/{id}/withdraw": {
    /** Withdraw funds */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["WithdrawRequest"];
        };
      };
      responses: {
        /** @description Withdrawal accepted */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/wallet/{id}/kyc": {
    /** Trigger KYC verification */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Verification result */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/wallet/{id}/status": {
    /** Get wallet status */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Wallet status */
        200: {
          content: {
            "application/json": components["schemas"]["WalletStatusResponse"];
          };
        };
      };
    };
  };
  "/wallet/{id}/transactions": {
    /** List wallet transactions */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Wallet transactions */
        200: {
          content: {
            "application/json": components["schemas"]["WalletTransactionsResponse"];
          };
        };
      };
    };
  };
  "/wallet/{id}/pending": {
    /** List pending wallet transactions */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Pending transactions */
        200: {
          content: {
            "application/json": components["schemas"]["PendingTransactionsResponse"];
          };
        };
      };
    };
  };
  "/wallet/iban": {
    /** Get current deposit IBAN */
    get: {
      responses: {
        /** @description Current IBAN */
        200: {
          content: {
            "application/json": components["schemas"]["IbanResponse"];
          };
        };
      };
    };
  };
  "/wallet/iban/history": {
    /** Get IBAN change history */
    get: {
      responses: {
        /** @description IBAN change history */
        200: {
          content: {
            "application/json": components["schemas"]["IbanHistoryResponse"];
          };
        };
      };
    };
  };
  "/wallet/provider/callback": {
    /** Payment provider callback */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProviderCallback"];
        };
      };
      responses: {
        /** @description Callback processed */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/withdrawals/{user}/approve": {
    /** Approve withdrawal */
    post: {
      parameters: {
        path: {
          user: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["WithdrawalDecisionRequest"];
        };
      };
      responses: {
        /** @description Withdrawal approved */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/withdrawals/{user}/reject": {
    /** Reject withdrawal */
    post: {
      parameters: {
        path: {
          user: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["WithdrawalDecisionRequest"];
        };
      };
      responses: {
        /** @description Withdrawal rejected */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/tournaments": {
    /** List tournaments */
    get: {
      responses: {
        /** @description Tournaments list */
        200: {
          content: {
            "application/json": components["schemas"]["TournamentList"];
          };
        };
      };
    };
  };
  "/tournaments/{id}": {
    /** Get tournament */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Tournament detail */
        200: {
          content: {
            "application/json": components["schemas"]["TournamentDetails"];
          };
        };
      };
    };
  };
  "/tournaments/{id}/register": {
    /** Register for tournament */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Tournament registration */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/tournaments/{id}/withdraw": {
    /** Withdraw from tournament */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Tournament withdrawal */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/tournaments/{id}/cancel": {
    /**
     * Cancel tournament
     * @description Admin only
     */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Tournament cancelled */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/tournaments/{id}/schedule": {
    /**
     * Schedule tournament
     * @description Admin only
     */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["TournamentScheduleRequest"];
        };
      };
      responses: {
        /** @description Tournament scheduled */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/tournaments/{id}/prizes": {
    /** Calculate prize distribution */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CalculatePrizesRequest"];
        };
      };
      responses: {
        /** @description Prize distribution */
        200: {
          content: {
            "application/json": components["schemas"]["CalculatePrizesResponse"];
          };
        };
      };
    };
  };
  "/tournaments/{id}/levels/hot-patch": {
    /**
     * Hot patch blind level
     * @description Admin only
     */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["HotPatchLevelRequest"];
        };
      };
      responses: {
        /** @description Level patched */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/leaderboard": {
    /** Get leaderboard */
    get: {
      responses: {
        /** @description Top players */
        200: {
          content: {
            "application/json": components["schemas"]["LeaderboardResponse"];
          };
        };
      };
    };
  };
  "/leaderboard/rebuild": {
    /** Rebuild leaderboard */
    post: {
      parameters: {
        query?: {
          days?: number;
        };
      };
      responses: {
        /** @description Rebuild started */
        202: {
          content: {
            "application/json": components["schemas"]["StatusResponse"];
          };
        };
      };
    };
  };
  "/hands/{id}/proof": {
    /** Get stored RNG proof for a hand */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Commitment, seed and nonce for the hand */
        200: {
          content: {
            "application/json": components["schemas"]["HandProof"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Hand not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/hands/proofs": {
    /** List stored RNG proofs */
    get: {
      parameters: {
        query?: {
          from?: number;
          to?: number;
          ids?: string;
        };
      };
      responses: {
        /** @description Proofs for hands */
        200: {
          content: {
            "application/json": components["schemas"]["HandProofs"];
          };
        };
      };
    };
  };
  "/hands/{id}/log": {
    /** Export hand log */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Hand log entries */
        200: {
          content: {
            "text/plain": string;
          };
        };
      };
    };
  };
  "/hands/{id}/state/{index}": {
    /** Reconstruct hand state at action index */
    get: {
      parameters: {
        path: {
          id: string;
          index: number;
        };
      };
      responses: {
        /** @description Reconstructed hand state */
        200: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/analytics/logs": {
    /** List system audit logs */
    get: {
      parameters: {
        query?: {
          cursor?: number;
          limit?: number;
        };
      };
      responses: {
        /** @description Audit logs */
        200: {
          content: {
            "application/json": components["schemas"]["AuditLogsResponse"];
          };
        };
      };
    };
  };
  "/analytics/summary": {
    /** Get audit log summary */
    get: {
      responses: {
        /** @description Audit log summary */
        200: {
          content: {
            "application/json": components["schemas"]["AuditSummaryResponse"];
          };
        };
      };
    };
  };
  "/analytics/collusion/flagged": {
    /** List collusion flagged sessions */
    get: {
      parameters: {
        query?: {
          page?: number;
          status?: components["schemas"]["ReviewStatus"];
        };
      };
      responses: {
        /** @description Flagged sessions */
        200: {
          content: {
            "application/json": components["schemas"]["FlaggedSessionsResponse"];
          };
        };
      };
    };
  };
  "/analytics/collusion/{sessionId}/{action}": {
    /** Apply collusion review action */
    post: {
      parameters: {
        path: {
          sessionId: string;
          action: components["schemas"]["ReviewAction"];
        };
      };
      responses: {
        /** @description Action applied */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/analytics/collusion/{sessionId}/audit": {
    /** Get collusion review action history */
    get: {
      parameters: {
        path: {
          sessionId: string;
        };
      };
      responses: {
        /** @description Review action history */
        200: {
          content: {
            "application/json": components["schemas"]["ReviewActionLogsResponse"];
          };
        };
      };
    };
  };
  "/admin/broadcasts": {
    /** List broadcasts */
    get: {
      responses: {
        /** @description Broadcast list */
        200: {
          content: {
            "application/json": components["schemas"]["BroadcastsResponse"];
          };
        };
      };
    };
    /** Send broadcast */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["SendBroadcastRequest"];
        };
      };
      responses: {
        /** @description Broadcast sent */
        201: {
          content: {
            "application/json": components["schemas"]["Broadcast"];
          };
        };
      };
    };
  };
  "/admin/kyc/{id}/denial": {
    /** Get KYC denial reason */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Denial reason */
        200: {
          content: {
            "application/json": components["schemas"]["KycDenialResponse"];
          };
        };
      };
    };
  };
  "/admin/deposits": {
    /** List pending deposits */
    get: {
      responses: {
        /** @description Pending deposits */
        200: {
          content: {
            "application/json": components["schemas"]["PendingDepositsResponse"];
          };
        };
      };
    };
  };
  "/admin/deposits/{id}/confirm": {
    /** Confirm pending deposit */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Deposit confirmed */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/admin/deposits/{id}/reject": {
    /** Reject pending deposit */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["DepositDecisionRequest"];
        };
      };
      responses: {
        /** @description Deposit rejected */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/admin/deposits/reconcile": {
    /** Reconcile bank deposits */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["BankReconciliationRequest"];
          "multipart/form-data": {
            /** Format: binary */
            file?: string;
          };
          "text/csv": string;
        };
      };
      responses: {
        /** @description Reconciliation completed */
        200: {
          content: never;
        };
        "application/json": {
          content: never;
        };
      };
    };
  };
  "/admin/audit-logs": {
    /** Get audit logs */
    get: {
      responses: {
        /** @description Audit logs */
        200: {
          content: {
            "application/json": components["schemas"]["AuditLogsResponse"];
          };
        };
      };
    };
  };
  "/admin/security-alerts": {
    /** Get security alerts */
    get: {
      responses: {
        /** @description Security alerts */
        200: {
          content: {
            "application/json": components["schemas"]["SecurityAlertsResponse"];
          };
        };
      };
    };
  };
  "/admin/messages": {
    /** List user messages */
    get: {
      responses: {
        /** @description Messages list */
        200: {
          content: {
            "application/json": components["schemas"]["AdminMessagesResponse"];
          };
        };
      };
    };
  };
  "/admin/messages/{id}/reply": {
    /** Reply to user message */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ReplyMessageRequest"];
        };
      };
      responses: {
        /** @description Reply sent */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/admin/withdrawals": {
    /** List pending withdrawals */
    get: {
      responses: {
        /** @description Pending withdrawals */
        200: {
          content: {
            "application/json": components["schemas"]["PendingWithdrawalsResponse"];
          };
        };
      };
    };
  };
  "/admin/withdrawals/{id}/confirm": {
    /** Confirm pending withdrawal */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Withdrawal confirmed */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/admin/withdrawals/{id}/reject": {
    /** Reject pending withdrawal */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["WithdrawalDecisionRequest"];
        };
      };
      responses: {
        /** @description Withdrawal rejected */
        200: {
          content: {
            "application/json": components["schemas"]["MessageResponse"];
          };
        };
      };
    };
  };
  "/user/profile": {
    /** Get current user profile */
    get: {
      responses: {
        /** @description User profile */
        200: {
          content: {
            "application/json": components["schemas"]["UserProfile"];
          };
        };
      };
    };
  };
  "/tiers": {
    /** Get tier definitions */
    get: {
      responses: {
        /** @description Tier definitions */
        200: {
          content: {
            "application/json": components["schemas"]["TiersResponse"];
          };
        };
      };
    };
  };
  "/game-types": {
    /** List game types */
    get: {
      responses: {
        /** @description Game types */
        200: {
          content: {
            "application/json": components["schemas"]["GameTypeList"];
          };
        };
      };
    };
  };
  "/users": {
    /** Create user */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateUserRequest"];
        };
      };
      responses: {
        /** @description User created */
        201: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Username already exists */
        409: {
          content: never;
        };
      };
    };
  };
  "/users/{id}": {
    /** Get user */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description User found */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
    /** Update user */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateUserRequest"];
        };
      };
      responses: {
        /** @description Updated user */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/users/{id}/ban": {
    /** Ban user */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": components["schemas"]["BanUserRequest"];
        };
      };
      responses: {
        /** @description Banned user */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
      };
    };
  };
  "/feature-flags": {
    /** List feature flags */
    get: {
      responses: {
        /** @description Feature flags */
        200: {
          content: {
            "application/json": components["schemas"]["FeatureFlagsResponse"];
          };
        };
      };
    };
  };
  "/feature-flags/{key}": {
    /** Set feature flag */
    put: {
      parameters: {
        path: {
          key: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FeatureFlagRequest"];
        };
      };
      responses: {
        /** @description Flag set */
        200: {
          content: {
            "application/json": components["schemas"]["FeatureFlag"];
          };
        };
      };
    };
    /** Delete feature flag */
    delete: {
      parameters: {
        path: {
          key: string;
        };
      };
      responses: {
        /** @description Flag deleted */
        204: {
          content: never;
        };
      };
    };
  };
  "/feature-flags/room/{tableId}/{key}": {
    /** Set room feature flag */
    put: {
      parameters: {
        path: {
          tableId: string;
          key: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FeatureFlagRequest"];
        };
      };
      responses: {
        /** @description Flag set */
        200: {
          content: {
            "application/json": components["schemas"]["FeatureFlag"];
          };
        };
      };
    };
    /** Delete room feature flag */
    delete: {
      parameters: {
        path: {
          tableId: string;
          key: string;
        };
      };
      responses: {
        /** @description Flag deleted */
        204: {
          content: never;
        };
      };
    };
  };
  "/feature-flags/tourney/{tourneyId}/{key}": {
    /** Set tournament feature flag */
    put: {
      parameters: {
        path: {
          tourneyId: string;
          key: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["FeatureFlagRequest"];
        };
      };
      responses: {
        /** @description Flag set */
        200: {
          content: {
            "application/json": components["schemas"]["FeatureFlag"];
          };
        };
      };
    };
    /** Delete tournament feature flag */
    delete: {
      parameters: {
        path: {
          tourneyId: string;
          key: string;
        };
      };
      responses: {
        /** @description Flag deleted */
        204: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    StatusResponse: {
      status: string;
    };
    ServiceStatusResponse: {
      status: string;
      contractVersion: string;
    };
    LoginRequest: {
      email: string;
      password: string;
    };
    LoginResponse: {
      token: string;
    };
    MessageResponse: {
      message: string;
    };
    AdminMessage: {
      id: number;
      sender: string;
      userId: string;
      avatar: string;
      subject: string;
      preview: string;
      content: string;
      time: string;
      read: boolean;
    };
    AdminMessagesResponse: {
      messages: components["schemas"]["AdminMessage"][];
    };
    ReplyMessageRequest: {
      reply: string;
    };
    DashboardMetricsResponse: {
      online: number;
      revenue: number;
      activity: number[];
      errors: number[];
    };
    AuditLogEntry: {
      id: number;
      /** Format: date-time */
      timestamp: string;
      /** @enum {string} */
      type: "Login" | "Table Event" | "Broadcast" | "Error";
      description: string;
      user: string;
      ip: string;
    };
    AuditLogsResponse: {
      logs: components["schemas"]["AuditLogEntry"][];
      nextCursor?: number | null;
    };
    AuditSummaryResponse: {
      total: number;
      errors: number;
      logins: number;
    };
    AlertItem: {
      id: string;
      /** @enum {string} */
      severity: "danger" | "warning";
      title: string;
      body: string;
      time: string;
      resolved?: boolean;
    };
    SecurityAlertsResponse: components["schemas"]["AlertItem"][];
    WithdrawalDecisionRequest: {
      comment: string;
    };
    RefreshRequest: {
      refreshToken: string;
    };
    RequestResetRequest: {
      email: string;
    };
    VerifyResetCodeRequest: {
      email: string;
      code: string;
    };
    ResetPasswordRequest: {
      email: string;
      code: string;
      password: string;
    };
    Amount: {
      amount: number;
      currency: string;
    };
    WithdrawRequest: {
      amount: number;
      deviceId: string;
      currency: string;
    };
    DepositRequest: {
      amount: number;
      deviceId: string;
      currency: string;
    };
    BankTransferDepositRequest: {
      amount: number;
      currency: string;
      deviceId: string;
      ip?: string;
      idempotencyKey?: string;
    };
    BankDetails: {
      bankName: string;
      accountNumber: string;
      routingCode: string;
    };
    BankTransferDepositResponse: {
      reference: string;
      bank: components["schemas"]["BankDetails"];
    };
    ProviderChallenge: {
      id?: string;
    };
    ProviderCallback: {
      eventId: string;
      idempotencyKey: string;
      providerTxnId: string;
      /** @enum {string} */
      status: "approved" | "risky" | "chargeback";
    };
    WalletStatusResponse: {
      kycVerified: boolean;
      denialReason?: string;
      realBalance: number;
      creditBalance: number;
      currency: string;
    };
    KycDenialResponse: {
      accountId: string;
      reason?: string | null;
    };
    WalletTransaction: {
      id: string;
      type: string;
      amount: number;
      currency: string;
      status: string;
      /** Format: date-time */
      createdAt: string;
    };
    WalletTransactionsResponse: {
      realBalance: number;
      creditBalance: number;
      transactions: components["schemas"]["WalletTransaction"][];
    };
    PendingTransaction: {
      id: string;
      type: string;
      amount: number;
      currency: string;
      status: string;
      /** Format: date-time */
      createdAt: string;
    };
    PendingTransactionsResponse: {
      realBalance: number;
      creditBalance: number;
      transactions: components["schemas"]["PendingTransaction"][];
    };
    PendingDeposit: {
      id: string;
      userId: string;
      amount: number;
      currency: string;
      reference: string;
      /** @enum {string} */
      status: "pending" | "confirmed" | "rejected";
      actionRequired: boolean;
      /** Format: date-time */
      expiresAt: string;
      confirmedBy?: string;
      /** Format: date-time */
      confirmedAt?: string;
      rejectedBy?: string;
      /** Format: date-time */
      rejectedAt?: string;
      rejectionReason?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    PendingDepositsResponse: {
      deposits: components["schemas"]["PendingDeposit"][];
    };
    PendingWithdrawal: {
      id: string;
      userId: string;
      amount: number;
      currency: string;
      /** @enum {string} */
      status: "pending" | "completed" | "rejected";
      /** Format: date-time */
      createdAt: string;
    };
    PendingWithdrawalsResponse: {
      withdrawals: components["schemas"]["PendingWithdrawal"][];
    };
    DepositDecisionRequest: {
      reason?: string;
    };
    BankReconciliationEntry: {
      reference: string;
      amount: number;
    };
    BankReconciliationRequest: {
      entries: components["schemas"]["BankReconciliationEntry"][];
    };
    IbanResponse: {
      iban: string;
      masked: string;
      holder: string;
      instructions: string;
      updatedBy: string;
      /** Format: date-time */
      updatedAt: string;
    };
    IbanHistoryEntry: {
      date: string;
      oldIban: string;
      newIban: string;
      by: string;
      notes: string;
    };
    IbanHistoryResponse: {
      history: components["schemas"]["IbanHistoryEntry"][];
    };
    CreateUserRequest: {
      username: string;
      avatarKey?: string;
    };
    UpdateUserRequest: {
      username?: string;
      avatarKey?: string;
    };
    BanUserRequest: {
      reason?: string;
    };
    User: {
      id: string;
      username: string;
      avatarKey?: string;
      banned: boolean;
    };
    UserProfile: {
      username: string;
      email: string;
      avatarUrl: string;
      bank: string;
      location: string;
      /** Format: date-time */
      joined: string;
      bio: string;
      experience: number;
      balance: number;
    };
    Tier: {
      name: string;
      min: number;
      max: number | null;
    };
    TiersResponse: components["schemas"]["Tier"][];
    GameAction: components["schemas"]["PostBlindAction"] | components["schemas"]["BetAction"] | components["schemas"]["RaiseAction"] | components["schemas"]["CallAction"] | components["schemas"]["CheckAction"] | components["schemas"]["FoldAction"] | components["schemas"]["NextAction"];
    GameStateDelta: {
      /** @enum {string} */
      version: "1";
      tick: number;
      delta: Record<string, never>;
    };
    PostBlindAction: {
      /** @enum {string} */
      version: "1";
      /** @enum {string} */
      type: "postBlind";
      tableId: string;
      playerId: string;
      amount: number;
    };
    BetAction: {
      /** @enum {string} */
      version: "1";
      /** @enum {string} */
      type: "bet";
      tableId: string;
      playerId: string;
      amount: number;
    };
    RaiseAction: {
      /** @enum {string} */
      version: "1";
      /** @enum {string} */
      type: "raise";
      tableId: string;
      playerId: string;
      amount: number;
    };
    CallAction: {
      /** @enum {string} */
      version: "1";
      /** @enum {string} */
      type: "call";
      tableId: string;
      playerId: string;
      amount?: number;
    };
    CheckAction: {
      /** @enum {string} */
      version: "1";
      /** @enum {string} */
      type: "check";
      tableId: string;
      playerId: string;
    };
    FoldAction: {
      /** @enum {string} */
      version: "1";
      /** @enum {string} */
      type: "fold";
      tableId: string;
      playerId: string;
    };
    NextAction: {
      /** @enum {string} */
      version: "1";
      /** @enum {string} */
      type: "next";
      tableId: string;
    };
    Tournament: {
      id: string;
      title: string;
      buyIn: number;
      fee?: number;
      prizePool: number;
      /** @enum {string} */
      state: "REG_OPEN" | "RUNNING" | "PAUSED" | "FINISHED" | "CANCELLED";
      pko?: components["schemas"]["PkoOptions"];
      rebuys?: components["schemas"]["RebuyOptions"];
      players: {
        current: number;
        max: number;
      };
      registered: boolean;
    };
    TournamentInfo: {
      title: string;
      description: string;
    };
    TournamentDetails: components["schemas"]["Tournament"] & ({
      registration?: {
        /** Format: date-time */
        open?: string | null;
        /** Format: date-time */
        close?: string | null;
      };
      overview?: components["schemas"]["TournamentInfo"][];
      structure?: components["schemas"]["TournamentInfo"][];
      prizes?: components["schemas"]["TournamentInfo"][];
    });
    TournamentList: components["schemas"]["Tournament"][];
    Table: {
      id: string;
      tableName: string;
      /** @enum {string} */
      gameType: "texas" | "omaha" | "allin" | "tournaments";
      stakes: {
        small: number;
        big: number;
      };
      players: {
        current: number;
        max: number;
      };
      buyIn: {
        min: number;
        max: number;
      };
      stats: {
        handsPerHour: number;
        avgPot: number;
        rake: number;
      };
      createdAgo: string;
    };
    TableList: components["schemas"]["Table"][];
    /** @enum {string} */
    GameType: "texas" | "omaha" | "allin" | "tournaments";
    GameTypeList: components["schemas"]["GameType"][];
    CreateTableRequest: {
      tableName: string;
      /** @enum {string} */
      gameType: "texas" | "omaha" | "allin" | "tournaments";
      stakes: {
        small?: number;
        big?: number;
      };
      startingStack: number;
      players: {
        max?: number;
      };
      buyIn: {
        min?: number;
        max?: number;
      };
    };
    UpdateTableRequest: {
      tableName?: string;
      /** @enum {string} */
      gameType?: "texas" | "omaha" | "allin" | "tournaments";
      stakes?: {
        small?: number;
        big?: number;
      };
      startingStack?: number;
      players?: {
        max?: number;
      };
      buyIn?: {
        min?: number;
        max?: number;
      };
    };
    Player: {
      id: number;
      username: string;
      avatar: string;
      chips: number;
      committed?: number;
      isActive?: boolean;
      isFolded?: boolean;
      sittingOut?: boolean;
      isAllIn?: boolean;
      isWinner?: boolean;
      timeLeft?: number;
      cards?: string[];
      pos?: string;
      lastAction?: string;
    };
    ChatMessage: {
      id: number;
      username: string;
      avatar: string;
      text: string;
      time: string;
    };
    SendChatMessageRequest: {
      userId: string;
      text: string;
    };
    TableData: {
      smallBlind: number;
      bigBlind: number;
      pot: number;
      communityCards: string[];
      players: components["schemas"]["Player"][];
      chatMessages: components["schemas"]["ChatMessage"][];
      stateAvailable?: boolean;
    };
    CalculatePrizesRequest: {
      prizePool: number;
      payouts: number[];
      bountyPct?: number;
      satelliteSeatCost?: number;
      /** @enum {string} */
      method?: "topN" | "icm";
      stacks?: number[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
