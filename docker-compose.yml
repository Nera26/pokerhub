version: '3.8'
services:
  api-gateway:
    image: kong:3.7
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
    volumes:
      - ./infrastructure/api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml:ro
    ports:
      - '8080:8000'
      - '8443:8443'
    depends_on:
      - backend
  backend:
    build: ./backend
    command: npm run start:dev
    env_file: .env
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ENDPOINT=http://${LOCALSTACK_HOST}:${LOCALSTACK_PORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      localstack:
        condition: service_healthy

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', '${DB_USER}']
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'status']
      interval: 5s
      timeout: 5s
      retries: 5

  localstack:
    image: localstack/localstack
    environment:
      - SERVICES=${LOCALSTACK_SERVICES}
      - DEFAULT_REGION=${AWS_REGION}
      - EDGE_PORT=${LOCALSTACK_PORT}
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${LOCALSTACK_PORT}/health']
      interval: 5s
      timeout: 5s
      retries: 5

