apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  labels:
    app: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: backend
        static_configs:
          - targets: ['backend:9464']
        metric_relabel_configs:
          - source_labels: [__name__]
            regex: 'game_action_ack_latency_ms.*|wallet_transactions_total|http_server_requests_duration_seconds.*|socket_message_latency_ms.*|service_availability_ratio'
            action: keep
    rule_files:
      - /etc/prometheus/alerts.yml
  alerts.yml: |
    groups:
      - name: observability-alerts
        rules:
          - alert: UptimeSLOViolation
            expr: (1 - avg_over_time(service_availability_ratio[30d])) > (1 - 0.9995)
            for: 5m
            labels:
              severity: critical
              pagerduty_service: pokerhub-sre
            annotations:
              summary: "Uptime below 99.95% SLO"
          - alert: ActionAckLatencySLOViolation
            expr: histogram_quantile(0.95, sum(rate(socket_action_ack_latency_ms_bucket[5m])) by (le)) > 120
            for: 5m
            labels:
              severity: critical
              pagerduty_service: pokerhub-sre
            annotations:
              summary: "Action ACK latency p95 over 120ms"
          - alert: HttpApiLatencySLOViolation
            expr: histogram_quantile(0.99, sum(rate(http_server_requests_duration_seconds_bucket[5m])) by (le)) > 0.2
            for: 5m
            labels:
              severity: critical
              pagerduty_service: pokerhub-sre
            annotations:
              summary: "HTTP API latency p99 over 200ms"
          - alert: WebSocketLatencySLOViolation
            expr: histogram_quantile(0.95, sum(rate(socket_message_latency_ms_bucket[5m])) by (le)) > 100
            for: 5m
            labels:
              severity: critical
              pagerduty_service: pokerhub-sre
            annotations:
              summary: "WebSocket message latency p95 over 100ms"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus
          args:
            - --config.file=/etc/prometheus/prometheus.yml
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
      volumes:
        - name: config
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  labels:
    app: grafana
data:
  slo-dashboard.json: |
    {
      "dashboard": {
        "title": "Service SLOs",
        "panels": [
          {
            "type": "timeseries",
            "title": "HTTP API p99 Latency",
            "datasource": "Prometheus",
            "targets": [
              {
                "expr": "histogram_quantile(0.99, sum(rate(http_server_requests_duration_seconds_bucket[5m])) by (le))"
              }
            ]
          },
          {
            "type": "timeseries",
            "title": "WebSocket p95 Latency",
            "datasource": "Prometheus",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(socket_message_latency_ms_bucket[5m])) by (le))"
              }
            ]
          },
          {
            "type": "timeseries",
            "title": "Action ACK p95 Latency",
            "datasource": "Prometheus",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(game_action_ack_latency_ms_bucket[5m])) by (le))"
              }
            ]
          },
          {
            "type": "timeseries",
            "title": "Wallet Transactions Rate",
            "datasource": "Prometheus",
            "targets": [
              {
                "expr": "sum(rate(wallet_transactions_total[5m]))"
              }
            ]
          },
          {
            "type": "timeseries",
            "title": "Service Availability",
            "datasource": "Prometheus",
            "targets": [
              {
                "expr": "avg_over_time(service_availability_ratio[30d])"
              }
            ]
          }
        ]
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: dashboards
              mountPath: /var/lib/grafana/dashboards
          env:
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
      volumes:
        - name: dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
