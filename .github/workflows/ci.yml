name: CI

on:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: read
  actions: read

jobs:
  workflow-sla:
    runs-on: ubuntu-latest
    steps:
      - name: Check DR drill SLA
        id: dr-drill
        uses: ./.github/workflows/check-workflow-sla
        with:
          workflow: dr-drill.yml
          sla: 7
          unit: days
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: Check failover drill SLA
        id: failover-drill
        uses: ./.github/workflows/check-workflow-sla
        with:
          workflow: failover-drill.yml
          sla: 7
          unit: days
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Check DR runbook entry
        run: npx -y ts-node scripts/check-dr-runbook.ts

      - name: Check proof-archive SLA
        id: proof-archive
        uses: ./.github/workflows/check-workflow-sla
        with:
          workflow: proof-archive.yml
          sla: 24
          unit: hours
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: Check ops-artifacts-verify SLA
        id: ops-artifacts-verify
        uses: ./.github/workflows/check-workflow-sla
        with:
          workflow: ops-artifacts-verify.yml
          sla: 24
          unit: hours
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}

      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
      - name: Verify proof archive integrity
        id: proof-archive-integrity
        env:
          PROOF_ARCHIVE_BUCKET: ${{ secrets.PROOF_ARCHIVE_BUCKET }}
        run: npx ts-node scripts/check-proof-archive.ts
      - name: Prepare proof archive integrity alert
        if: failure() && steps.proof-archive-integrity.outcome == 'failure'
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          cat <<'EOF' > proof-archive-integrity.md
          Proof archive integrity check failed.
          EOF
          jq -n --arg channel "$SLACK_CHANNEL_ID" \
            --arg text "Proof archive integrity check failed." \
            '{channel: $channel, text: $text}' > proof-archive-integrity-slack.json
      - name: Slack alert (proof archive integrity)
        if: failure() && steps.proof-archive-integrity.outcome == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          method: chat.postMessage
          payload-file-path: proof-archive-integrity-slack.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Create issue for proof archive integrity
        if: failure() && steps.proof-archive-integrity.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "Proof archive integrity check failed"
          content-filepath: proof-archive-integrity.md

      - name: Check soak SLA
        id: soak
        uses: ./.github/workflows/check-workflow-sla
        with:
          workflow: soak.yml
          sla: 24
          unit: hours
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
      - name: Check soak metrics
        env:
          SOAK_TRENDS_BUCKET: ${{ secrets.SOAK_TRENDS_BUCKET }}
        run: |
          set -euo pipefail
          run=$(curl -fsS -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/soak.yml/runs?per_page=1")
          conclusion=$(echo "$run" | jq -r '.workflow_runs[0].conclusion')
          started=$(echo "$run" | jq -r '.workflow_runs[0].run_started_at')
          echo "workflow=soak.yml" >> $GITHUB_OUTPUT
          echo "timestamp=$started" >> $GITHUB_OUTPUT
          echo "conclusion=$conclusion" >> $GITHUB_OUTPUT
          start_ts=$(date -d "$started" +%s)
          now=$(date -u +%s)
          max_age=$((SLA_HOURS * 3600))
          if [ "$conclusion" != "success" ] || [ $((now - start_ts)) -gt "$max_age" ]; then
            echo "Latest soak workflow run did not succeed within ${SLA_HOURS} hours" >&2
            exit 1
          fi
          npx ts-node --compiler-options '{"module":"commonjs"}' scripts/check-soak-metrics.ts

      - name: Prepare soak SLA alert
        if: failure() && steps.soak.outcome == 'failure'
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          cat <<'EOF' > soak-sla.md
          Workflow: ${{ steps.soak.outputs.workflow }}
          Last Run: ${{ steps.soak.outputs.timestamp }}
          Conclusion: ${{ steps.soak.outputs.conclusion }}
          EOF
          jq -n --arg channel "$SLACK_CHANNEL_ID" \
            --arg text "soak.yml SLA check failed. Last run: ${{ steps.soak.outputs.timestamp }} (conclusion: ${{ steps.soak.outputs.conclusion }})." \
            '{channel: $channel, text: $text}' > soak-slack.json
      - name: Slack alert (soak SLA)
        if: failure() && steps.soak.outcome == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          method: chat.postMessage
          payload-file-path: soak-slack.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Create issue for soak SLA
        if: failure() && steps.soak.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "SLA breached: soak"
          content-filepath: soak-sla.md


      - name: Check pg-restore-smoke SLA
        id: pg-restore-smoke
        uses: ./.github/workflows/check-workflow-sla
        with:
          workflow: pg-restore-smoke.yml
          sla: 60
          unit: minutes
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: Check spectator-privacy-nightly SLA
        id: spectator-privacy-nightly
        uses: ./.github/workflows/check-workflow-sla
        with:
          workflow: spectator-privacy-nightly.yml
          sla: 24
          unit: hours
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: Get spectator privacy run ID
        id: get_run_id
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RUN_ID=$(gh api \
            repos/${{ github.repository }}/actions/workflows/spectator-privacy-nightly.yml/runs \
            --jq '.workflow_runs[0].id')
          echo "RUN_ID=$RUN_ID" >> "$GITHUB_OUTPUT"

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
      - name: Verify ops artifacts
        env:
          PROOF_ARCHIVE_BUCKET: ${{ secrets.PROOF_ARCHIVE_BUCKET }}
          SPECTATOR_PRIVACY_BUCKET: ${{ secrets.SPECTATOR_PRIVACY_BUCKET }}
          SOAK_TRENDS_BUCKET: ${{ secrets.SOAK_TRENDS_BUCKET }}
          DR_METRICS_BUCKET: ${{ secrets.DR_METRICS_BUCKET }}
          RUN_ID: ${{ steps.get_run_id.outputs.RUN_ID }}
        run: npx ts-node scripts/verify-ops-artifacts.ts

  soak-metrics:
    runs-on: ubuntu-latest
    env:
      SOAK_LATENCY_P95_MS: 120
      SOAK_THROUGHPUT_MIN: 100
    steps:
      - name: Check soak run SLA
        id: soak-run
        uses: ./.github/workflows/check-workflow-sla
        with:
          workflow: soak.yml
          sla: 24
          unit: hours
          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
      - uses: actions/checkout@v4
        if: steps.soak-run.outcome == 'success'
      - uses: google-github-actions/auth@v2
        if: steps.soak-run.outcome == 'success'
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - uses: google-github-actions/setup-gcloud@v2
        if: steps.soak-run.outcome == 'success'
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
      - name: Check soak metrics
        id: check-metrics
        if: steps.soak-run.outcome == 'success'
        run: npx ts-node scripts/check-soak-metrics.ts
        env:
          SOAK_TRENDS_BUCKET: ${{ secrets.SOAK_TRENDS_BUCKET }}
      - name: Analyze soak trends
        id: analyze-trends
        if: steps.soak-run.outcome == 'success'
        run: |
          gcloud storage cp -r "gs://${{ secrets.SOAK_TRENDS_BUCKET }}/soak/latest/**" metrics || true
          npx ts-node --compiler-options '{"module":"commonjs"}' scripts/analyze-soak-trends.ts metrics
        env:
          SOAK_TRENDS_BUCKET: ${{ secrets.SOAK_TRENDS_BUCKET }}
      - name: Prepare soak metrics alert
        if: failure() && steps.check-metrics.outcome == 'failure'
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          cat <<'EOF' > soak-metrics.md
          Soak metrics check failed.
          EOF
          jq -n --arg channel "$SLACK_CHANNEL_ID" \
            --arg text "Soak metrics check failed." \
            '{channel: $channel, text: $text}' > soak-metrics-slack.json
      - name: Slack soak metrics alert
        if: failure() && steps.check-metrics.outcome == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          method: chat.postMessage
          payload-file-path: soak-metrics-slack.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Create issue for soak metrics
        if: failure() && steps.check-metrics.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "SLA breached: soak metrics"
          content-filepath: soak-metrics.md
      - name: Prepare soak regression Slack payload
        if: failure() && steps.analyze-trends.outcome == 'failure'
        run: jq -Rs '{channel: env.SLACK_CHANNEL_ID, text: .}' metrics/baseline.json > soak-regression-slack.json
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      - name: Slack soak regression alert
        if: failure() && steps.analyze-trends.outcome == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          method: chat.postMessage
          payload-file-path: soak-regression-slack.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Open soak regression issue
        if: failure() && steps.analyze-trends.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Soak trends regression detected
          content-filepath: metrics/baseline.json

  docs:
    needs: workflow-sla
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run docs:lint
      - run: npm run docs:check

  dr-runbook-check:
    needs: docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npx ts-node scripts/check-dr-runbook.ts

  contracts:
    needs: [docs, dr-runbook-check]
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm ci --prefix backend
      - run: npm ci --prefix frontend
      - name: Backend contract tests
        run: npm run test:contracts --prefix backend
      - name: Frontend contract tests
        run: npm run test:contracts --prefix frontend

  proof-archive:
    needs: contracts
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: proof
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/proof
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm ci --legacy-peer-deps --prefix backend
      - name: Seed proof fixture
        run: psql "$DATABASE_URL" -f backend/test/fixtures/proof-hand.sql
      - name: Export proof
        run: npx -y ts-node scripts/export-hand-proof.ts 11111111-1111-1111-1111-111111111111
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
      - name: Validate proof archive
        run: npx -y ts-node scripts/validate-proof-archive.ts

  proof-archive-integration:
    needs: proof-archive
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm ci --legacy-peer-deps --prefix backend
      - name: Test proof archive migrations
        run: npx -y ts-node scripts/test-proof-archive-migrations.ts

  unit:
    needs:
      - contracts
      - proof-archive-integration
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: ./scripts/test-stages.sh unit | tee unit.log
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-${{ github.sha }}
          path: unit.log

  property:
    needs: unit
    if: ${{ always() }}
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: ./scripts/test-stages.sh property | tee property.log
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: property-${{ github.sha }}
          path: property.log

  spectator-privacy:
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    needs: property
    runs-on: ubuntu-latest
    continue-on-error: false
    env:
      SPECTATOR_PRIVACY_BUCKET: ${{ secrets.SPECTATOR_PRIVACY_BUCKET }}
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
      - uses: ./.github/actions/spectator-privacy-check
      - name: Upload logs to GCS
        if: always()
        env:
          RUN_ID: ${{ github.run_id }}
        run: |
          gcloud storage cp backend-tests.log gs://$SPECTATOR_PRIVACY_BUCKET/$RUN_ID/backend-tests.log
          gcloud storage cp frontend-tests.log gs://$SPECTATOR_PRIVACY_BUCKET/$RUN_ID/frontend-tests.log
      - name: Verify logs in GCS
        if: always()
        env:
          RUN_ID: ${{ github.run_id }}
        run: |
          gcloud storage ls gs://$SPECTATOR_PRIVACY_BUCKET/$RUN_ID/ | tee gcs-logs.txt
          grep backend-tests.log gcs-logs.txt
          grep frontend-tests.log gcs-logs.txt
      - name: Upload spectator privacy logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spectator-privacy-logs-${{ github.sha }}
          path: |
            backend-tests.log
            frontend-tests.log

  integration:
    needs: spectator-privacy
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: ./scripts/test-stages.sh integration | tee integration.log
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-${{ github.sha }}
          path: integration.log

  e2e:
    needs: integration
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: ./scripts/test-stages.sh e2e | tee e2e.log
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-${{ github.sha }}
          path: e2e.log

  load:
    needs: e2e
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - uses: grafana/setup-k6@v1
      - run: |
          mkdir -p load/results
          k6 run load/k6-swarm.js --vus 10 --duration 10s --summary-export=load/results/summary.json | tee load/results/k6.log
      - run: load/check-thresholds.sh load/results/summary.json
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-${{ github.sha }}
          path: |
            load/results/summary.json
            load/results/k6.log

  chaos:
    needs: load
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - uses: grafana/setup-k6@v1
      - run: ./scripts/test-stages.sh chaos | tee chaos.log
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: chaos-${{ github.sha }}
          path: chaos.log

  soak:
    needs: chaos
    runs-on: ubuntu-latest
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - uses: grafana/setup-k6@v1
      - run: |
          mkdir -p load/results
          k6 run load/k6-ws-soak.js --vus 10 --duration 30s --summary-export=load/results/ws-soak-summary.json
      - run: load/check-thresholds.sh load/results/ws-soak-summary.json metrics/gc-histogram.json metrics/heap-histogram.json metrics/cpu-histogram.json
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
      - name: Download latest baseline
        run: |
          mkdir -p baseline
          gcloud storage cp -r "gs://${{ secrets.SOAK_TRENDS_BUCKET }}/soak/latest/**" baseline || true
      - name: Threshold check against baseline
        id: threshold
        run: |
          if [ -f baseline/baseline.json ]; then
            npx ts-node --compiler-options '{"module":"commonjs"}' scripts/analyze-soak-trends.ts metrics baseline
          else
            echo "No baseline to compare against"
          fi
      - name: Open soak regression issue
        if: failure() && steps.threshold.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Soak trends regression detected
          content-filepath: metrics/baseline.json
      - name: Prepare soak regression Slack payload
        if: failure() && steps.threshold.outcome == 'failure'
        run: jq -Rs '{channel: env.SLACK_CHANNEL_ID, text: .}' metrics/baseline.json > slack-payload.json
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      - name: Slack soak regression alert
        if: failure() && steps.threshold.outcome == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          method: chat.postMessage
          payload-file-path: slack-payload.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Sync soak metrics
        if: always()
        run: |
          gcloud storage rsync -r metrics "gs://${{ secrets.SOAK_TRENDS_BUCKET }}/soak-${{ github.run_id }}/"
          gcloud storage rsync -r metrics "gs://${{ secrets.SOAK_TRENDS_BUCKET }}/soak/latest/"
      - name: Check soak metrics
        id: check-metrics
        if: always()
        run: npx ts-node scripts/check-soak-metrics.ts
        env:
          SOAK_TRENDS_BUCKET: ${{ secrets.SOAK_TRENDS_BUCKET }}
      - name: Prepare soak metrics alert
        if: failure() && steps.check-metrics.outcome == 'failure'
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          cat <<'EOF' > soak-metrics.md
          Soak metrics check failed.
          EOF
          jq -n --arg channel "$SLACK_CHANNEL_ID" \
            --arg text "Soak metrics check failed." \
            '{channel: $channel, text: $text}' > soak-metrics-slack.json
      - name: Slack soak metrics alert
        if: failure() && steps.check-metrics.outcome == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          method: chat.postMessage
          payload-file-path: soak-metrics-slack.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Create issue for soak metrics
        if: failure() && steps.check-metrics.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "SLA breached: soak metrics"
          content-filepath: soak-metrics.md
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: soak-${{ github.sha }}
          path: |
            load/results/ws-soak-summary.json
            metrics/gc-histogram.json
            metrics/heap-histogram.json
            metrics/cpu-histogram.json
            metrics/baseline.json

  dr-trends:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
      - name: Check DR RTO/RPO trends
        id: dr-trends
        env:
          DR_METRICS_BUCKET: ${{ vars.DR_METRICS_BUCKET }}
          RTO_THRESHOLD: ${{ vars.DR_RTO_TARGET || 1800 }}
          RPO_THRESHOLD: ${{ vars.DR_RPO_TARGET || 300 }}
        run: |
          set -e
          result=$(npx ts-node infra/disaster-recovery/check-dr-trends.ts)
          echo "$result" | tee dr-trends.json
          echo "$result" | jq -r '[
            "Latest RTO: \(.latest.rto)s",
            "Latest RPO snapshot: \(.latest.rpoSnap)s",
            "Latest RPO WAL: \(.latest.rpoWal)s",
            "Average RTO: \(.average.rto)s",
            "Average RPO snapshot: \(.average.rpoSnap)s",
            "Average RPO WAL: \(.average.rpoWal)s",
            "Δ RTO: \(.trend.rto)s",
            "Δ RPO snapshot: \(.trend.rpoSnap)s",
            "Δ RPO WAL: \(.trend.rpoWal)s"
          ] | join("\n")' >> "$GITHUB_STEP_SUMMARY"
      - name: Prepare DR trend Slack payload
        if: always()
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          node -e "const fs=require('fs');const d=JSON.parse(fs.readFileSync('dr-trends.json','utf8'));const msg=`DR drill trends: latest RTO ${d.latest.rto}s avg ${d.average.rto.toFixed(1)}s, latest RPO WAL ${d.latest.rpoWal}s avg ${d.average.rpoWal.toFixed(1)}s`;fs.writeFileSync('dr-trends-slack.json',JSON.stringify({channel:process.env.SLACK_CHANNEL_ID,text:msg}));"
      - name: Publish DR trend summary
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          method: chat.postMessage
          payload-file-path: dr-trends-slack.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
