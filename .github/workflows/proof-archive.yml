name: proof-archive
concurrency:
  group: "proof-archive"
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  workflow_call:
    secrets:
      DATABASE_URL:
        required: true
      PROOF_ARCHIVE_BUCKET:
        required: true
      PROOF_MANIFEST_BUCKET:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      PAGERDUTY_ROUTING_KEY:
        required: true

jobs:
  archive:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install backend dependencies
        run: npm ci --legacy-peer-deps --prefix backend
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
      - name: Export recent hand proofs
        run: |
          ids=$(psql "$DATABASE_URL" -Atc "SELECT id FROM hand WHERE seed IS NOT NULL AND nonce IS NOT NULL AND created_at >= NOW() - INTERVAL '1 day'")
          mkdir -p storage/proofs
          failed=0
          for id in $ids; do
            if ! npx -y ts-node scripts/export-hand-proof.ts "$id"; then
              failed=1
            fi
          done
          if [ -z "$ids" ]; then
            echo "No hand proofs found to export" >&2
            exit 1
          fi
          if [ "$failed" -ne 0 ]; then
            exit 1
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      - name: Generate checksum manifest
        run: |
          cd storage/proofs
          if ls *.json >/dev/null 2>&1; then
            sha256sum *.json > manifest.txt
          else
            : > manifest.txt
          fi
      - name: Validate exported proofs and manifest
        run: |
          set -o pipefail
          npx -y ts-node scripts/validate-proof-archive.ts 2>&1 | tee proof-validation.log
      - name: Proof archive summary
        if: success()
        run: |
          count=$(wc -l < storage/proofs/manifest.txt)
          manifest_sha=$(sha256sum storage/proofs/manifest.txt | awk '{print $1}')
          echo "{\"count\":$count,\"manifestSha\":\"$manifest_sha\"}" > proof-summary.json
          {
            echo "### Proof Archive"
            echo "- proofs: $count"
            echo "- manifest sha256: \`$manifest_sha\`"
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Record proof metrics
        if: success()
        run: |
          count=$(jq '.count' proof-summary.json)
          manifest_sha=$(jq -r '.manifestSha' proof-summary.json)
          gcloud monitoring metrics write custom.googleapis.com/proof/archive_count "$count" --project=${{ vars.GCP_PROJECT_ID }}
          gcloud monitoring metrics write custom.googleapis.com/proof/manifest_hash 1 --project=${{ vars.GCP_PROJECT_ID }} --labels=hash="$manifest_sha"
      - name: Load proof summary to BigQuery
        if: success()
        run: |
          jq --arg run_id "${GITHUB_RUN_ID}" --arg ts "$(date -u +%Y-%m-%dT%H:%M:%SZ)" '. + {run_id:$run_id, timestamp:$ts}' proof-summary.json > proof-summary.bq.json
          bq load --project_id=${{ vars.GCP_PROJECT_ID }} --source_format=NEWLINE_DELIMITED_JSON ops_metrics.proof_archives proof-summary.bq.json infra/analytics/proof_archives.schema.json
      - name: Sign and upload proof summary manifest
        if: success()
        env:
          PROOF_MANIFEST_BUCKET: ${{ secrets.PROOF_MANIFEST_BUCKET }}
        run: |
          set -e
          sha=$(sha256sum proof-summary.json | awk '{print $1}')
          gcloud kms asymmetric-signature sign \
            --key=${{ vars.PROOF_MANIFEST_KMS_KEY }} \
            --keyring=${{ vars.PROOF_MANIFEST_KMS_KEYRING }} \
            --location=${{ vars.PROOF_MANIFEST_KMS_LOCATION }} \
            --version=${{ vars.PROOF_MANIFEST_KMS_VERSION || 1 }} \
            --plaintext-file=proof-summary.json \
            --signature-file=proof-summary.sig
          sig=$(base64 -w0 proof-summary.sig)
          printf '{"sha256":"%s","signature":"%s"}' "$sha" "$sig" > proof-summary.manifest.json
          dest_date="gs://$PROOF_MANIFEST_BUCKET/$(date +%Y-%m-%d)/"
          dest_latest="gs://$PROOF_MANIFEST_BUCKET/latest/"
          gcloud storage cp proof-summary.json "${dest_date}proof-summary.json"
          gcloud storage cp proof-summary.manifest.json "${dest_date}manifest.json"
          gcloud storage cp proof-summary.json "${dest_latest}proof-summary.json"
          gcloud storage cp proof-summary.manifest.json "${dest_latest}manifest.json"
      - name: Upload proof summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: proof-summary-${{ github.run_id }}
          path: proof-summary.json
          retention-days: 30
      - name: Upload validation logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: proof-validation-${{ github.run_id }}
          path: proof-validation.log
          retention-days: 30
      - name: Check proof archive bucket policies
        run: npx -y ts-node scripts/check-proof-archive-retention.ts
        env:
          PROOF_ARCHIVE_BUCKET: ${{ secrets.PROOF_ARCHIVE_BUCKET }}
          PROOF_ARCHIVE_MIN_RETENTION_DAYS: 365
      - name: Upload proofs to GCS
        if: success()
        run: |
          set -e
          dest="gs://${{ secrets.PROOF_ARCHIVE_BUCKET }}/$(date +%Y-%m-%d)/"
          gcloud storage cp storage/proofs/* "$dest"
      - name: Verify GCS upload
        if: success()
        run: |
          set -e
          dest="gs://${{ secrets.PROOF_ARCHIVE_BUCKET }}/$(date +%Y-%m-%d)/"
          echo "Uploaded files:"
          gcloud storage ls "$dest"
          local_count=$(find storage/proofs -name '*.json' | wc -l)
          remote_count=$(gcloud storage ls "$dest" | grep -c '.json$')
          if [ "$local_count" -ne "$remote_count" ]; then
            echo "Proof count mismatch: local $local_count vs remote $remote_count" >&2
            exit 1
          fi
          local_hash=$(sha256sum storage/proofs/manifest.txt | awk '{print $1}')
          remote_hash=$(gcloud storage cat "${dest}manifest.txt" | sha256sum | awk '{print $1}')
          if [ "$local_hash" != "$remote_hash" ]; then
            echo "Manifest hash mismatch: local $local_hash vs remote $remote_hash" >&2
            exit 1
          fi
      - name: Restore and validate archived proofs
        if: success()
        run: |
          set -o pipefail
          tmpdir=$(mktemp -d)
          prefix="gs://${{ secrets.PROOF_ARCHIVE_BUCKET }}/$(date +%Y-%m-%d)/"
          mapfile -t files < <(gcloud storage ls "$prefix" | awk -F/ '{print $NF}' | grep '.json$' | shuf -n 5)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No proof files found in archive" >&2
            exit 1
          fi
          gcloud storage cp "${prefix}manifest.txt" "$tmpdir/manifest.txt"
          for f in "${files[@]}"; do
            gcloud storage cp "${prefix}${f}" "$tmpdir/$f"
          done
          npx -y ts-node scripts/restore-proof-check.ts "${files[@]/#/$tmpdir/}" "$tmpdir/manifest.txt" 2>&1 | tee restore-validation.log
          cat restore-validation.log >> "$GITHUB_STEP_SUMMARY"
      - name: Upload restore validation logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: restore-proof-validation-${{ github.run_id }}
          path: restore-validation.log
          retention-days: 30
      - name: Upload proofs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hand-proofs-${{ github.run_id }}
          path: storage/proofs
          retention-days: 30
      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "Hand proof archive failed for ${GITHUB_REPOSITORY}@${GITHUB_SHA}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: PagerDuty alert on failure
        if: failure()
        env:
          ROUTING_KEY: ${{ secrets.PAGERDUTY_ROUTING_KEY }}
        run: |
          curl -X POST https://events.pagerduty.com/v2/enqueue \
            -H 'Content-Type: application/json' \
            -d '{"routing_key":"'$ROUTING_KEY'","event_action":"trigger","payload":{"summary":"Hand proof archive failed","source":"github-actions","severity":"error"}}'

  historical-sample:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
      - name: Validate historical proof samples
        run: |
          set -eo pipefail
          bucket="gs://${{ secrets.PROOF_ARCHIVE_BUCKET }}"
          cutoff=$(date -d '30 days ago' +%Y-%m-%d)
          mapfile -t dirs < <(gcloud storage ls "$bucket/" | awk -F/ '{print $NF}' | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}/$' | sed 's/\/$//' | awk -v c="$cutoff" '$1 < c' | shuf -n 1)
          if [ ${#dirs[@]} -eq 0 ]; then
            echo "No historical proof batches older than 30 days" >&2
            exit 1
          fi
          dir=${dirs[0]}
          prefix="$bucket/$dir/"
          tmpdir=$(mktemp -d)
          gcloud storage cp "${prefix}manifest.txt" "$tmpdir/manifest.txt"
          mapfile -t files < <(gcloud storage ls "$prefix" | awk -F/ '{print $NF}' | grep '.json$' | shuf -n 5)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No proof files found in batch $dir" >&2
            exit 1
          fi
          for f in "${files[@]}"; do
            gcloud storage cp "${prefix}${f}" "$tmpdir/$f"
          done
          set +e
          npx -y ts-node scripts/restore-proof-check.ts "${files[@]/#/$tmpdir/}" "$tmpdir/manifest.txt" --summary "$tmpdir/summary.json"
          status=$?
          set -e
          passed=$(jq '.passed' "$tmpdir/summary.json")
          failed=$(jq '.failed' "$tmpdir/summary.json")
          gcloud monitoring metrics write custom.googleapis.com/proof/historical_pass "$passed"
          gcloud monitoring metrics write custom.googleapis.com/proof/historical_fail "$failed"
          { echo "### Historical Proof Sample"; echo "- batch: $dir"; cat "$tmpdir/summary.json"; } >> "$GITHUB_STEP_SUMMARY"
          if [ "$status" -ne 0 ]; then
            exit "$status"
          fi
