name: deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: read
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    env:
      DEPLOY_ENV: production
      K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE }}
      HEALTH_CHECK_URL: ${{ vars.HEALTH_CHECK_URL }}
      PROMETHEUS_URL: ${{ vars.PROMETHEUS_URL }}
      ACK_LATENCY_THRESHOLD_MS: 120
      ERROR_RATE_THRESHOLD: 0.0005
      DR_DRILL_SLA_DAYS: 7
      DR_FAILOVER_SLA_DAYS: 30
      DR_RESTORE_SLA_DAYS: 30
      SOAK_SLA_HOURS: 24
      PG_RESTORE_SLA_MINUTES: 60
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Set GKE cluster context
        run: gcloud container clusters get-credentials ${{ vars.GKE_CLUSTER_NAME }} --zone ${{ vars.GKE_CLUSTER_ZONE }} --project ${{ vars.GCP_PROJECT_ID }}

      # --- Pre-deploy gates (all must pass) ---
      - name: Verify recent DR drill
        id: drdrill
        env:
          SLA_DAYS: ${{ env.DR_DRILL_SLA_DAYS }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          resp=$(curl -fsS -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/dr-drill.yml/runs?per_page=1")
          ts=$(echo "$resp" | jq -r '.workflow_runs[0].updated_at')
          conclusion=$(echo "$resp" | jq -r '.workflow_runs[0].conclusion')
          echo "timestamp=$ts" >> "$GITHUB_OUTPUT"
          now=$(date -u +%s)
          run_ts=$(date -d "$ts" -u +%s)
          max_age=$((SLA_DAYS * 86400))
          age=$((now - run_ts))
          if [ "$conclusion" != "success" ]; then
            echo "Latest dr-drill run concluded with $conclusion" >&2
            exit 1
          fi
          if [ "$age" -gt "$max_age" ]; then
            echo "Latest dr-drill run is older than ${SLA_DAYS}d" >&2
            exit 1
          fi

      - name: Verify recent DR failover
        id: drfailover
        env:
          SLA_DAYS: ${{ env.DR_FAILOVER_SLA_DAYS }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          resp=$(curl -fsS -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/dr-failover.yml/runs?per_page=1")
          ts=$(echo "$resp" | jq -r '.workflow_runs[0].updated_at')
          conclusion=$(echo "$resp" | jq -r '.workflow_runs[0].conclusion')
          echo "timestamp=$ts" >> "$GITHUB_OUTPUT"
          now=$(date -u +%s)
          run_ts=$(date -d "$ts" -u +%s)
          max_age=$((SLA_DAYS * 86400))
          age=$((now - run_ts))
          if [ "$conclusion" != "success" ]; then
            echo "Latest dr-failover run concluded with $conclusion" >&2
            exit 1
          fi
          if [ "$age" -gt "$max_age" ]; then
            echo "Latest dr-failover run is older than ${SLA_DAYS}d" >&2
            exit 1
          fi

      - name: Notify on-call on stale DR failover
        if: failure() && steps.drfailover.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "ðŸš« Deployment blocked: dr-failover workflow failed or stale for ${{ github.repository }}@${{ github.sha }}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Ensure dr-restore recent success
        id: drrestore
        env:
          SLA_DAYS: ${{ env.DR_RESTORE_SLA_DAYS }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          resp=$(curl -fsS -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/dr-restore.yml/runs?per_page=1")
          ts=$(echo "$resp" | jq -r '.workflow_runs[0].updated_at')
          conclusion=$(echo "$resp" | jq -r '.workflow_runs[0].conclusion')
          echo "timestamp=$ts" >> "$GITHUB_OUTPUT"
          now=$(date -u +%s)
          run_ts=$(date -d "$ts" -u +%s)
          max_age=$((SLA_DAYS * 86400))
          age=$((now - run_ts))
          if [ "$conclusion" != "success" ]; then
            echo "Latest dr-restore run concluded with $conclusion" >&2
            exit 1
          fi
          if [ "$age" -gt "$max_age" ]; then
            echo "Latest dr-restore run is older than ${SLA_DAYS}d" >&2
            exit 1
          fi

      - name: Notify on-call on stale DR restore
        if: failure() && steps.drrestore.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "ðŸš« Deployment blocked: dr-restore workflow failed or stale for ${{ github.repository }}@${{ github.sha }}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Ensure proof-archive recent success
        id: proof_archive
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          run=$(curl -fsS -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/proof-archive.yml/runs?per_page=1")
          conclusion=$(echo "$run" | jq -r '.workflow_runs[0].conclusion')
          started=$(echo "$run" | jq -r '.workflow_runs[0].run_started_at')
          start_ts=$(date -d "$started" +%s)
          now=$(date -u +%s)
          if [ "$conclusion" != "success" ] || [ $((now - start_ts)) -gt 86400 ]; then
            echo "Latest proof-archive workflow run did not succeed within 24 hours"
            exit 1
          fi

      - name: Notify on-call on stale proof-archive
        if: failure() && steps.proof_archive.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "ðŸš« Deployment blocked: proof-archive workflow failed or stale for ${{ github.repository }}@${{ github.sha }}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Ensure ops-artifacts-verify recent success
        id: ops_artifacts_verify
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          run=$(curl -fsS -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/ops-artifacts-verify.yml/runs?per_page=1")
          conclusion=$(echo "$run" | jq -r '.workflow_runs[0].conclusion')
          started=$(echo "$run" | jq -r '.workflow_runs[0].run_started_at')
          start_ts=$(date -d "$started" +%s)
          now=$(date -u +%s)
          if [ "$conclusion" != "success" ] || [ $((now - start_ts)) -gt 86400 ]; then
            echo "Latest ops-artifacts-verify workflow run did not succeed within 24 hours"
            exit 1
          fi

      - name: Notify on-call on stale ops-artifacts-verify
        if: failure() && steps.ops_artifacts_verify.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "ðŸš« Deployment blocked: ops-artifacts-verify workflow failed or stale for ${{ github.repository }}@${{ github.sha }}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Ensure soak test recent success
        id: soak
        env:
          SLA_HOURS: ${{ env.SOAK_SLA_HOURS }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          run=$(curl -fsS -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/soak.yml/runs?per_page=1")
          conclusion=$(echo "$run" | jq -r '.workflow_runs[0].conclusion')
          started=$(echo "$run" | jq -r '.workflow_runs[0].run_started_at')
          start_ts=$(date -d "$started" +%s)
          now=$(date -u +%s)
          max_age=$((SLA_HOURS * 3600))
          if [ "$conclusion" != "success" ] || [ $((now - start_ts)) -gt "$max_age" ]; then
            echo "Latest soak workflow run did not succeed within ${SLA_HOURS} hours"
            exit 1
          fi

      - name: Notify on-call on stale soak test
        if: failure() && steps.soak.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "ðŸš« Deployment blocked: soak workflow failed or stale for ${{ github.repository }}@${{ github.sha }}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Ensure pg-restore-smoke recent success
        id: pg_restore_smoke
        env:
          SLA_MINUTES: ${{ env.PG_RESTORE_SLA_MINUTES }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          run=$(curl -fsS -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/pg-restore-smoke.yml/runs?per_page=1")
          conclusion=$(echo "$run" | jq -r '.workflow_runs[0].conclusion')
          started=$(echo "$run" | jq -r '.workflow_runs[0].run_started_at')
          start_ts=$(date -d "$started" +%s)
          now=$(date -u +%s)
          max_age=$((SLA_MINUTES * 60))
          if [ "$conclusion" != "success" ] || [ $((now - start_ts)) -gt "$max_age" ]; then
            echo "Latest pg-restore-smoke workflow run did not succeed within ${SLA_MINUTES} minutes"
            exit 1
          fi

      - name: Notify on-call on stale pg-restore-smoke
        if: failure() && steps.pg_restore_smoke.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "ðŸš« Deployment blocked: pg-restore-smoke workflow failed or stale for ${{ github.repository }}@${{ github.sha }}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Ensure spectator-privacy recent success
        id: spectator_privacy
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          run=$(curl -fsS -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/spectator-privacy.yml/runs?per_page=1")
          conclusion=$(echo "$run" | jq -r '.workflow_runs[0].conclusion')
          started=$(echo "$run" | jq -r '.workflow_runs[0].run_started_at')
          start_ts=$(date -d "$started" +%s)
          now=$(date -u +%s)
          if [ "$conclusion" != "success" ] || [ $((now - start_ts)) -gt 86400 ]; then
            echo "Latest spectator-privacy workflow run did not succeed within 24 hours"
            exit 1
          fi

      - name: Notify on-call on stale spectator-privacy
        if: failure() && steps.spectator_privacy.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "ðŸš« Deployment blocked: spectator-privacy workflow failed or stale for ${{ github.repository }}@${{ github.sha }}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # --- Tooling/setup ---
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.27.3

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.0

      # --- Validations & tests ---
      - name: Validate observability configs
        run: |
          python -m pip install pyyaml >/dev/null
          python infra/observability/validate.py

      - name: Run spectator privacy tests
        uses: ./.github/actions/spectator-privacy-check
        with:
          node-version: 18

      - name: Upload spectator privacy logs
        if: always()
        env:
          SPECTATOR_PRIVACY_BUCKET: ${{ secrets.SPECTATOR_PRIVACY_BUCKET }}
        run: |
          gcloud storage cp backend-tests.log frontend-tests.log gs://$SPECTATOR_PRIVACY_BUCKET/${{ github.run_id }}/

      # --- Canary, SLO check, promote/rollback ---
      - name: Run canary deploy
        run: bash deploy/canary.sh ${{ github.sha }}

      - name: Query Prometheus metrics
        id: metrics
        continue-on-error: true
        env:
          PROMETHEUS_URL: ${{ env.PROMETHEUS_URL }}
          ACK_LATENCY_THRESHOLD_MS: ${{ env.ACK_LATENCY_THRESHOLD_MS }}
          ERROR_RATE_THRESHOLD: ${{ env.ERROR_RATE_THRESHOLD }}
        run: |
          set -euo pipefail
          ACK_QUERY='histogram_quantile(0.95, rate(game_action_ack_latency_ms_bucket[5m]))'
          ERR_QUERY='sum(rate(http_requests_total{status=~"5.."}[5m])) / sum(rate(http_requests_total[5m]))'
          ack=$(curl -sG "$PROMETHEUS_URL/api/v1/query" --data-urlencode "query=$ACK_QUERY" | jq -r '.data.result[0].value[1] // "0"')
          err=$(curl -sG "$PROMETHEUS_URL/api/v1/query" --data-urlencode "query=$ERR_QUERY" | jq -r '.data.result[0].value[1] // "0"')
          jq -n --arg ack "$ack" --arg err "$err" '{game_action_ack_p95_ms: ($ack|tonumber), http_error_rate: ($err|tonumber)}' > metrics.json
          echo "ack_p95_ms=$ack" >> "$GITHUB_OUTPUT"
          echo "http_error_rate=$err" >> "$GITHUB_OUTPUT"
          if (( $(echo "$ack > $ACK_LATENCY_THRESHOLD_MS" | bc -l) )) || (( $(echo "$err > $ERROR_RATE_THRESHOLD" | bc -l) )); then
            exit 1
          fi

      - name: Canary rollback on SLO violation
        if: steps.metrics.outcome != 'success'
        run: |
          bash deploy/rollback.sh
          echo "outcome=rollback" > outcome.txt
          exit 1

      - name: Record successful deployment
        if: steps.metrics.outcome == 'success'
        run: echo "outcome=success" > outcome.txt

      - name: Promote canary
        if: steps.metrics.outcome == 'success'
        run: scripts/promote.sh

      - name: Get spectator privacy run ID
        id: get_run_id
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RUN_ID=$(gh api \
            repos/${{ github.repository }}/actions/workflows/spectator-privacy-nightly.yml/runs \
            --jq '.workflow_runs[0].id')
          echo "RUN_ID=$RUN_ID" >> "$GITHUB_OUTPUT"

      - name: Validate spectator privacy nightly run
        id: spectator_privacy_nightly
        env:
          SLA_HOURS: 24
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          resp=$(curl -fsS -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/spectator-privacy-nightly.yml/runs?per_page=1")
          ts=$(echo "$resp" | jq -r '.workflow_runs[0].updated_at')
          conclusion=$(echo "$resp" | jq -r '.workflow_runs[0].conclusion')
          echo "timestamp=$ts" >> "$GITHUB_OUTPUT"
          now=$(date -u +%s)
          run_ts=$(date -d "$ts" -u +%s)
          max_age=$((SLA_HOURS * 3600))
          age=$((now - run_ts))
          if [ "$conclusion" != "success" ]; then
            echo "Latest spectator-privacy-nightly run concluded with $conclusion" >&2
            exit 1
          fi
          if [ "$age" -gt "$max_age" ]; then
            echo "Latest spectator-privacy-nightly run is older than ${SLA_HOURS}h" >&2
            exit 1
          fi

      - name: Notify on-call on stale spectator privacy run
        if: failure() && steps.spectator_privacy_nightly.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "ðŸš« Deployment blocked: spectator-privacy-nightly workflow failed or stale for ${{ github.repository }}@${{ github.sha }}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: PagerDuty alert on stale spectator privacy run
        if: failure() && steps.spectator_privacy_nightly.outcome == 'failure'
        env:
          ROUTING_KEY: ${{ secrets.PAGERDUTY_ROUTING_KEY }}
        run: |
          curl -X POST https://events.pagerduty.com/v2/enqueue \
            -H 'Content-Type: application/json' \
            -d '{"routing_key":"'$ROUTING_KEY'","event_action":"trigger","payload":{"summary":"spectator-privacy-nightly workflow failed or stale during deployment","source":"github-actions","severity":"error"}}'

      - name: Verify ops artifacts
        id: verify_ops_artifacts
        env:
          PROOF_ARCHIVE_BUCKET: ${{ secrets.PROOF_ARCHIVE_BUCKET }}
          SPECTATOR_PRIVACY_BUCKET: ${{ secrets.SPECTATOR_PRIVACY_BUCKET }}
          SOAK_TRENDS_BUCKET: ${{ secrets.SOAK_TRENDS_BUCKET }}
          RUN_ID: ${{ steps.get_run_id.outputs.RUN_ID }}
          DR_METRICS_BUCKET: ${{ secrets.DR_METRICS_BUCKET }}
        run: |
          npm ci --legacy-peer-deps
          set +e
          out=$(npx ts-node scripts/verify-ops-artifacts.ts 2>&1)
          status=$?
          set -e
          echo "$out"
          printf "%s\n" "$out" > verify-ops.log
          printf "%s" "$out" | sha256sum >> verify-ops.log
          gcloud storage cp verify-ops.log gs://$DR_METRICS_BUCKET/verify/$GITHUB_RUN_ID/
          url="https://storage.googleapis.com/$DR_METRICS_BUCKET/verify/$GITHUB_RUN_ID/verify-ops.log"
          echo "$url" >> "$GITHUB_STEP_SUMMARY"
          exit $status

      - name: Notify on-call on ops artifact failure
        if: failure() && steps.verify_ops_artifacts.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            { "text": "ðŸš« Deployment failed: ops artifacts missing for ${{ github.repository }}@${{ github.sha }}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: PagerDuty alert on ops artifact failure
        if: failure() && steps.verify_ops_artifacts.outcome == 'failure'
        env:
          ROUTING_KEY: ${{ secrets.PAGERDUTY_ROUTING_KEY }}
        run: |
          curl -X POST https://events.pagerduty.com/v2/enqueue \
            -H 'Content-Type: application/json' \
            -d '{"routing_key":"'$ROUTING_KEY'","event_action":"trigger","payload":{"summary":"Ops artifacts missing during deployment","source":"github-actions","severity":"error"}}'

      # --- Artifacts & summary ---
      - name: Upload deployment metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-metrics
          path: |
            metrics.json
            outcome.txt

      - name: Deployment summary
        if: always()
        run: |
          {
            echo "### Deployment Audit"
            echo "- DR drill last run: ${{ steps.drdrill.outputs.timestamp }}"
            echo "- DR failover last run: ${{ steps.drfailover.outputs.timestamp }}"
            echo "- DR restore last run: ${{ steps.drrestore.outputs.timestamp }}"
            echo "- game_action_ack_p95_ms: ${{ steps.metrics.outputs.ack_p95_ms }}"
            echo "- http_error_rate: ${{ steps.metrics.outputs.http_error_rate }}"
          } >> "$GITHUB_STEP_SUMMARY"
