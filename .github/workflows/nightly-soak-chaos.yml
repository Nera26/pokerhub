name: nightly-soak-chaos
concurrency:
  group: "nightly-soak-chaos"
  cancel-in-progress: true

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  tables:
    runs-on: ubuntu-latest
    env:
      METRICS_URL: http://localhost:3000/metrics
    steps:
      - uses: actions/checkout@v4
      - name: Start GC/heap collector
        run: |
          load/collect-gc-heap.sh &
          echo $! > collector.pid
        env:
          GRAFANA_PUSH_URL: ${{ secrets.GRAFANA_PUSH_URL }}
          GC_THRESHOLD: 50
      - name: Run 10k table scenario
        uses: grafana/k6-action@v0.2.0
        with:
          filename: load/k6-10k-tables.js
          flags: >-
            --summary-export=10k-summary.json
            -o experimental-prometheus-rw=${{ secrets.GRAFANA_PROM_URL }}
      - name: Stop collector
        if: always()
        run: kill $(cat collector.pid)
      - name: Check thresholds
        run: load/check-thresholds.sh 10k-summary.json
      - name: Check heap growth
        run: |
          start=$(grep -m1 heap_used gc-heap-metrics.log | awk -F'heap_used=' '{print $2}' | awk '{print $1}')
          end=$(grep heap_used gc-heap-metrics.log | tail -1 | awk -F'heap_used=' '{print $2}' | awk '{print $1}')
          python - "$start" "$end" <<'PY'
import sys
s=float(sys.argv[1]); e=float(sys.argv[2])
growth=(e-s)*100/s
print(f"heap growth: {growth}%")
if growth > 1:
    sys.exit("heap growth exceeded 1%")
PY
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Analyze soak trends
        id: analyze_tables
        run: |
          set -o pipefail
          npx ts-node --compiler-options '{"module":"commonjs"}' scripts/analyze-soak-trends.ts metrics 2>&1 | tee comparison.log
        env:
          SOAK_TRENDS_BUCKET: ${{ secrets.SOAK_TRENDS_BUCKET }}
      - name: Open soak regression issue
        if: failure() && steps.analyze_tables.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Tables soak trends regression detected
          content-filepath: comparison.log
      - name: Prepare soak regression Slack payload
        if: failure() && steps.analyze_tables.outcome == 'failure'
        run: jq -Rs '{channel: env.SLACK_CHANNEL_ID, text: .}' comparison.log > slack-payload.json
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      - name: Slack soak regression alert
        if: failure() && steps.analyze_tables.outcome == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          method: chat.postMessage
          payload-file-path: slack-payload.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Sync soak metrics
        if: always()
        run: gcloud storage cp --recursive metrics "gs://${{ secrets.SOAK_TRENDS_BUCKET }}/tables-${{ github.run_id }}/"
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: tables-metrics
          path: |
            10k-summary.json
            ack-histogram.json
            gc-heap-metrics.log

  soak:
    needs: tables
    runs-on: ubuntu-latest
    timeout-minutes: 1440
    env:
      METRICS_URL: http://localhost:3000/metrics
    steps:
      - uses: actions/checkout@v4
      - name: Start GC/heap collector
        run: |
          load/collect-gc-heap.sh &
          echo $! > collector.pid
        env:
          GRAFANA_PUSH_URL: ${{ secrets.GRAFANA_PUSH_URL }}
          GC_THRESHOLD: 50
      - name: Run soak test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: load/soak.js
          flags: >-
            --summary-export=soak-summary.json
            -o experimental-prometheus-rw=${{ secrets.GRAFANA_PROM_URL }}
      - name: Stop collector
        if: always()
        run: kill $(cat collector.pid)
      - name: Check thresholds
        run: load/check-thresholds.sh soak-summary.json
      - name: Check heap growth
        run: |
          start=$(grep -m1 heap_used gc-heap-metrics.log | awk -F'heap_used=' '{print $2}' | awk '{print $1}')
          end=$(grep heap_used gc-heap-metrics.log | tail -1 | awk -F'heap_used=' '{print $2}' | awk '{print $1}')
          python - "$start" "$end" <<'PY'
import sys
s=float(sys.argv[1]); e=float(sys.argv[2])
growth=(e-s)*100/s
print(f"heap growth: {growth}%")
if growth > 1:
    sys.exit("heap growth exceeded 1%")
PY
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Analyze soak trends
        id: analyze_soak
        run: |
          set -o pipefail
          npx ts-node --compiler-options '{"module":"commonjs"}' scripts/analyze-soak-trends.ts metrics 2>&1 | tee comparison.log
        env:
          SOAK_TRENDS_BUCKET: ${{ secrets.SOAK_TRENDS_BUCKET }}
      - name: Open soak regression issue
        if: failure() && steps.analyze_soak.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Soak trends regression detected
          content-filepath: comparison.log
      - name: Prepare soak regression Slack payload
        if: failure() && steps.analyze_soak.outcome == 'failure'
        run: jq -Rs '{channel: env.SLACK_CHANNEL_ID, text: .}' comparison.log > slack-payload.json
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      - name: Slack soak regression alert
        if: failure() && steps.analyze_soak.outcome == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          method: chat.postMessage
          payload-file-path: slack-payload.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Sync soak metrics
        if: always()
        run: gcloud storage cp --recursive metrics "gs://${{ secrets.SOAK_TRENDS_BUCKET }}/soak-${{ github.run_id }}/"
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: soak-metrics
          path: |
            soak-summary.json
            gc-heap-metrics.log

  chaos:
    runs-on: ubuntu-latest
    needs: soak
    env:
      METRICS_URL: http://localhost:3000/metrics
    steps:
      - uses: actions/checkout@v4
      - name: Start GC/heap collector
        run: |
          load/collect-gc-heap.sh &
          echo $! > collector.pid
        env:
          GRAFANA_PUSH_URL: ${{ secrets.GRAFANA_PUSH_URL }}
          GC_THRESHOLD: 50
      - name: Start toxiproxy with packet loss and jitter
        run: |
          docker run -d --name toxiproxy -p 8474:8474 -p 3001:3001 ghcr.io/shopify/toxiproxy
          PACKET_LOSS=0.01 LATENCY_MS=80 JITTER_MS=20 ./load/chaos/toxiproxy-chaos.sh
      - name: Run chaos test
        uses: grafana/k6-action@v0.2.0
        env:
          SIO_URL: ws://localhost:3001/game
        with:
          filename: load/chaos/ws-chaos.js
          flags: >-
            --summary-export=chaos-summary.json
            -o experimental-prometheus-rw=${{ secrets.GRAFANA_PROM_URL }}
      - name: Stop toxiproxy
        if: always()
        run: docker rm -f toxiproxy
      - name: Stop collector
        if: always()
        run: kill $(cat collector.pid)
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Analyze soak trends
        id: analyze_chaos
        run: |
          set -o pipefail
          npx ts-node --compiler-options '{"module":"commonjs"}' scripts/analyze-soak-trends.ts metrics 2>&1 | tee comparison.log
        env:
          SOAK_TRENDS_BUCKET: ${{ secrets.SOAK_TRENDS_BUCKET }}
      - name: Open soak regression issue
        if: failure() && steps.analyze_chaos.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Chaos trends regression detected
          content-filepath: comparison.log
      - name: Prepare soak regression Slack payload
        if: failure() && steps.analyze_chaos.outcome == 'failure'
        run: jq -Rs '{channel: env.SLACK_CHANNEL_ID, text: .}' comparison.log > slack-payload.json
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      - name: Slack soak regression alert
        if: failure() && steps.analyze_chaos.outcome == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          method: chat.postMessage
          payload-file-path: slack-payload.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Sync soak metrics
        if: always()
        run: gcloud storage cp --recursive metrics "gs://${{ secrets.SOAK_TRENDS_BUCKET }}/chaos-${{ github.run_id }}/"
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: chaos-metrics
          path: |
            chaos-summary.json
            gc-heap-metrics.log

  soak-metrics:
    needs: chaos
    if: ${{ always() }}
    uses: ./.github/workflows/soak-metrics.yml
    secrets: inherit

  spectator-privacy:
    needs: [chaos, soak-metrics]
    if: ${{ always() }}
    uses: ./.github/workflows/spectator-privacy.yml
    secrets: inherit
    with:
      logs: backend-tests.log frontend-tests.log integration.log property.log
