---
"on":
  workflow_dispatch:
  workflow_call:
  schedule:
    - cron: '0 0 * * *'

name: soak-test

jobs:
  soak:
    runs-on: ubuntu-latest
    timeout-minutes: 1440
    env:
      METRICS_URL: http://localhost:3000/metrics
      SOAK_LATENCY_P95_MS: 120
      SOAK_THROUGHPUT_MIN: 100
      SOAK_TRENDS_MAX_PCT: ${{ vars.SOAK_TRENDS_MAX_PCT || 20 }}
    steps:
      - uses: actions/checkout@v4
      - name: Install toxiproxy CLI
        run: |
          TOXI_VER=v2.5.0
          TOXI_BASE=https://github.com/Shopify/toxiproxy/releases/download/$TOXI_VER
          curl -sSL $TOXI_BASE/toxiproxy-cli-linux-amd64 \
            -o /usr/local/bin/toxiproxy-cli
          chmod +x /usr/local/bin/toxiproxy-cli
      - name: Start toxiproxy
        run: |
          docker run -d --name toxiproxy -p 8474:8474 -p 3001:3001 \
            ghcr.io/shopify/toxiproxy
      - name: Configure toxiproxy
        run: load/toxiproxy-soak.sh
        env:
          PROXY_PORT: 3001
          UPSTREAM: localhost:3000
      - name: Start GC/heap collector
        run: |
          load/collect-gc-heap.sh &
          echo $! > collector.pid
        env:
          GRAFANA_PUSH_URL: ${{ secrets.GRAFANA_PUSH_URL }}
      - name: Run k6 soak test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: load/k6-ws-soak.js
          flags: >-
            --summary-export=soak-summary.json
            -o experimental-prometheus-rw=${{ secrets.GRAFANA_PROM_URL }}
      - name: Check soak thresholds
        run: ./load/check-thresholds.sh soak-summary.json
      - name: Convert soak summary to CSV
        run: |
          echo "metric,p95,rate,count,value" > soak-summary.csv
          jq -r '.metrics | to_entries[] | [
            .key,
            (.value["p(95)"] // ""),
            (.value.rate // ""),
            (.value.count // ""),
            (.value.value // "")
          ] | @csv' soak-summary.json >> soak-summary.csv
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
      - name: Write soak metrics to Cloud Monitoring
        run: |
          p95=$(jq -r '.metrics.ws_latency["p(95)"] // .metrics.ack_latency["p(95)"] // 0' soak-summary.json)
          throughput=$(jq -r '.metrics.ws_msgs_sent.rate // 0' soak-summary.json)
          gcloud monitoring metrics write custom.googleapis.com/soak/latency "${p95}" \
            --labels build_sha=${{ github.sha }},run_id=${{ github.run_id }}
          gcloud monitoring metrics write custom.googleapis.com/soak/throughput "${throughput}" \
            --labels build_sha=${{ github.sha }},run_id=${{ github.run_id }}
      - name: Analyze soak trends
        run: npx ts-node --compiler-options '{"module":"commonjs"}' scripts/analyze-soak-trends.ts metrics
        env:
          SOAK_TRENDS_BUCKET: ${{ secrets.SOAK_TRENDS_BUCKET }}
          SOAK_TRENDS_MAX_PCT: ${{ vars.SOAK_TRENDS_MAX_PCT || 20 }}
      - name: Open soak regression issue
        if: failure()
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Soak trends regression detected
          content-filepath: metrics/baseline.json
      - name: Sync soak metrics
        if: always()
        run: |
          run_uri="gs://${{ secrets.SOAK_TRENDS_BUCKET }}/soak-${{ github.run_id }}/"
          gcloud storage rsync -r metrics "$run_uri"
          latest_uri="gs://${{ secrets.SOAK_TRENDS_BUCKET }}/soak/latest/"
          gcloud storage cp \
            soak-summary.json \
            soak-summary.csv \
            metrics/baseline.json \
            metrics/trend-delta.json \
            metrics/latency-histogram.json \
            metrics/gc-histogram.json \
            metrics/heap-histogram.json \
            "$latest_uri"
      - name: Check soak metrics
        id: check-metrics
        if: always()
        run: npx ts-node scripts/check-soak-metrics.ts
        env:
          SOAK_TRENDS_BUCKET: ${{ secrets.SOAK_TRENDS_BUCKET }}
      - name: Prepare soak metrics alert
        if: failure() && steps.check-metrics.outcome == 'failure'
        env:
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          cat <<'EOF' > soak-metrics.md
          Soak metrics check failed.
          EOF
          jq -n --arg channel "$SLACK_CHANNEL_ID" \
            --arg text "Soak metrics check failed." \
            '{channel: $channel, text: $text}' > soak-metrics-slack.json
      - name: Slack soak metrics alert
        if: failure() && steps.check-metrics.outcome == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          method: chat.postMessage
          payload-file-path: soak-metrics-slack.json
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Create issue for soak metrics
        if: failure() && steps.check-metrics.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "SLA breached: soak metrics"
          content-filepath: soak-metrics.md
      - name: Publish soak metrics
        if: always()
        run: |
          p95=$(jq -r '.metrics.ws_latency["p(95)"] // .metrics.ack_latency["p(95)"] // 0' soak-summary.json)
          p99=$(jq -r '.metrics.ws_latency["p(99)"] // .metrics.ack_latency["p(99)"] // 0' soak-summary.json)
          err=$(jq -r '.metrics.error_rate.rate * 100' soak-summary.json)
          {
            echo "### Soak Test Metrics"
            echo ""
            echo "- Latency p95: ${p95} ms"
            echo "- Latency p99: ${p99} ms"
            printf '- Error rate: %.2f%%\n' "${err}"
          } >> "$GITHUB_STEP_SUMMARY"
      - name: Stop GC/heap collector
        if: always()
        run: kill $(cat collector.pid)
      - name: Stop toxiproxy
        if: always()
        run: docker rm -f toxiproxy
      - name: Upload summary
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: soak-summary
          path: |
            soak-summary.json
            metrics/baseline.json
            metrics/trend-delta.json
      - name: Upload GC metrics
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: gc-heap-metrics
          path: gc-heap-metrics.log

  gateway-soak:
    runs-on: ubuntu-latest
    timeout-minutes: 1440
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install backend deps
        working-directory: backend
        run: npm ci
      - name: Run GameGateway soak test
        working-directory: backend
        run: node --trace-gc -r ts-node/register test/soak/soak24h.ts
