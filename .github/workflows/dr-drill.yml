name: dr-drill

on:
  schedule:
    - cron: '0 2 * * 1'
  workflow_dispatch:

jobs:
  drill:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Run disaster recovery drill
        run: bash infra/disaster-recovery/drill.sh
        env:
          PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          PG_INSTANCE_ID: ${{ vars.PG_INSTANCE_ID }}
          SECONDARY_REGION: ${{ vars.SECONDARY_REGION }}
          PGUSER: ${{ vars.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: postgres
          WAL_ARCHIVE_BUCKET: ${{ vars.WAL_ARCHIVE_BUCKET }}

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Run restore health check
        run: npx -y ts-node infra/disaster-recovery/tests/restore.test.ts
        env:
          PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          PG_SNAPSHOT_ID: ${{ vars.PG_SNAPSHOT_ID }}
          PG_BACKUP_ID: ${{ vars.PG_SNAPSHOT_ID }}
          SECONDARY_REGION: ${{ vars.SECONDARY_REGION }}

      - name: Parse metrics
        id: metrics
        run: |
          source drill.metrics
          echo "rto=$RTO_SECONDS" >> "$GITHUB_OUTPUT"
          echo "rpo_snap=$RPO_SNAPSHOT_SECONDS" >> "$GITHUB_OUTPUT"
          echo "rpo_wal=$RPO_WAL_SECONDS" >> "$GITHUB_OUTPUT"
          echo "failover=$FAILOVER_SECONDS" >> "$GITHUB_OUTPUT"
          echo "primary_restore=$PRIMARY_RESTORE_SECONDS" >> "$GITHUB_OUTPUT"

      - name: Check RTO/RPO objectives
        env:
          RTO: ${{ steps.metrics.outputs.rto }}
          RPO_SNAP: ${{ steps.metrics.outputs.rpo_snap }}
          RPO_WAL: ${{ steps.metrics.outputs.rpo_wal }}
          FAILOVER: ${{ steps.metrics.outputs.failover }}
          PRIMARY_RESTORE: ${{ steps.metrics.outputs.primary_restore }}
          RTO_TARGET: 1800
          RPO_TARGET: 300
        run: |
          {
            echo "### DR Drill Metrics"
            echo "- RTO: ${RTO}s (target ≤ ${RTO_TARGET}s)"
            echo "- RPO (snapshot): ${RPO_SNAP}s (target ≤ ${RPO_TARGET}s)"
            echo "- RPO (WAL): ${RPO_WAL}s (target ≤ ${RPO_TARGET}s)"
            echo "- Failover: ${FAILOVER}s"
            echo "- Primary restore: ${PRIMARY_RESTORE}s"
          } >> "$GITHUB_STEP_SUMMARY"
          if [ "$RTO" -gt "$RTO_TARGET" ] || [ "$RPO_SNAP" -gt "$RPO_TARGET" ] || [ "$RPO_WAL" -gt "$RPO_TARGET" ]; then
            echo "RTO/RPO objectives exceeded" >&2
            exit 1
          fi

      - name: Upload metrics to GCS
        id: upload_metrics
        if: success()
        env:
          BUCKET: ${{ vars.DR_METRICS_BUCKET }}
        run: |
          uri="gs://$BUCKET/${GITHUB_RUN_ID}/drill.metrics"
          gcloud storage cp drill.metrics "$uri"
          url="https://storage.googleapis.com/$BUCKET/${GITHUB_RUN_ID}/drill.metrics"
          echo "url=$url" >> "$GITHUB_OUTPUT"

      - name: Prepare drill run summary
        if: success()
        run: |
          ts=$(date --iso-8601=seconds)
          rto=${{ steps.metrics.outputs.rto }}
          rpo_snap=${{ steps.metrics.outputs.rpo_snap }}
          rpo_wal=${{ steps.metrics.outputs.rpo_wal }}
          failover=${{ steps.metrics.outputs.failover }}
          primary_restore=${{ steps.metrics.outputs.primary_restore }}
          cat > dr-drill-run.json <<EOF
          {
            "run_id": "${GITHUB_RUN_ID}",
            "timestamp": "$ts",
            "rto_seconds": $rto,
            "rpo_snapshot_seconds": $rpo_snap,
            "rpo_wal_seconds": $rpo_wal,
            "failover_seconds": $failover,
            "primary_restore_seconds": $primary_restore
          }
          EOF

      - name: Load drill metrics to BigQuery
        if: success()
        run: |
          bq --project_id=${{ vars.GCP_PROJECT_ID }} load --source_format=NEWLINE_DELIMITED_JSON \
            --time_partitioning_field timestamp ops_metrics.dr_drill_runs dr-drill-run.json infra/analytics/dr_drill_runs.schema.json

      - name: Publish drill results
        if: success()
        env:
          RTO: ${{ steps.metrics.outputs.rto }}
          RPO_SNAP: ${{ steps.metrics.outputs.rpo_snap }}
          RPO_WAL: ${{ steps.metrics.outputs.rpo_wal }}
          FAILOVER: ${{ steps.metrics.outputs.failover }}
          PRIMARY_RESTORE: ${{ steps.metrics.outputs.primary_restore }}
          METRICS_URL: ${{ steps.upload_metrics.outputs.url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ts=$(date --iso-8601=seconds)
          perl -0 -i -pe "s/<!-- DR_DRILL_RESULTS -->/<!-- DR_DRILL_RESULTS -->\n- $ts: [metrics]($METRICS_URL) – RTO ${RTO}s, snapshot RPO ${RPO_SNAP}s, WAL RPO ${RPO_WAL}s, failover ${FAILOVER}s, primary restore ${PRIMARY_RESTORE}s/" docs/runbooks/disaster-recovery.md
          git config user.name github-actions
          git config user.email actions@github.com
          git commit -am "chore(dr): record drill results" && git push

      - name: Upload metrics
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dr-drill
          path: drill.metrics

      - name: Publish metrics to Cloud Monitoring
        if: success()
        env:
          RTO: ${{ steps.metrics.outputs.rto }}
          RPO_SNAP: ${{ steps.metrics.outputs.rpo_snap }}
          RPO_WAL: ${{ steps.metrics.outputs.rpo_wal }}
          FAILOVER: ${{ steps.metrics.outputs.failover }}
          PRIMARY_RESTORE: ${{ steps.metrics.outputs.primary_restore }}
        run: |
          gcloud monitoring metrics write custom.googleapis.com/dr/rto "$RTO"
          gcloud monitoring metrics write custom.googleapis.com/dr/rpo_snapshot "$RPO_SNAP"
          gcloud monitoring metrics write custom.googleapis.com/dr/rpo_wal "$RPO_WAL"
          gcloud monitoring metrics write custom.googleapis.com/dr/failover "$FAILOVER"
          gcloud monitoring metrics write custom.googleapis.com/dr/primary_restore "$PRIMARY_RESTORE"

      - name: PagerDuty alert on failure
        if: failure()
        env:
          ROUTING_KEY: ${{ secrets.PAGERDUTY_ROUTING_KEY }}
        run: |
          curl -X POST https://events.pagerduty.com/v2/enqueue \
            -H 'Content-Type: application/json' \
            -d '{"routing_key":"'$ROUTING_KEY'","event_action":"trigger","payload":{"summary":"DR drill failed","source":"github-actions","severity":"error"}}'

      - name: Create GitHub issue on failure
        if: failure()
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: DR drill failure
          content-filepath: drill.metrics
