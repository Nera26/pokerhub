name: dr-drill

on:
  schedule:
    - cron: '0 2 * * 1'
  workflow_dispatch:

jobs:
  drill:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Run disaster recovery drill
        run: bash infra/disaster-recovery/drill.sh
        env:
          PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PG_INSTANCE_ID: ${{ vars.PG_INSTANCE_ID }}
          SECONDARY_REGION: ${{ vars.SECONDARY_REGION }}
          PGUSER: ${{ vars.PGUSER }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          PGDATABASE: postgres
          WAL_ARCHIVE_BUCKET: ${{ vars.WAL_ARCHIVE_BUCKET }}

      - name: Parse metrics
        id: metrics
        run: |
          source drill.metrics
          echo "rto=$RTO_SECONDS" >> "$GITHUB_OUTPUT"
          echo "rpo_snap=$RPO_SNAPSHOT_SECONDS" >> "$GITHUB_OUTPUT"
          echo "rpo_wal=$RPO_WAL_SECONDS" >> "$GITHUB_OUTPUT"

      - name: Publish drill results
        if: success()
        env:
          RTO: ${{ steps.metrics.outputs.rto }}
          RPO_SNAP: ${{ steps.metrics.outputs.rpo_snap }}
          RPO_WAL: ${{ steps.metrics.outputs.rpo_wal }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ts=$(date --iso-8601=seconds)
          perl -0 -i -pe "s/<!-- DR_DRILL_RESULTS -->/<!-- DR_DRILL_RESULTS -->\n- $ts: RTO ${RTO}s, snapshot RPO ${RPO_SNAP}s, WAL RPO ${RPO_WAL}s/" docs/runbooks/disaster-recovery.md
          git config user.name github-actions
          git config user.email actions@github.com
          git commit -am "chore(dr): record drill results" && git push

      - name: Upload metrics
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dr-drill
          path: drill.metrics

      - name: PagerDuty alert on failure
        if: failure()
        env:
          ROUTING_KEY: ${{ secrets.PAGERDUTY_ROUTING_KEY }}
        run: |
          curl -X POST https://events.pagerduty.com/v2/enqueue \
            -H 'Content-Type: application/json' \
            -d '{"routing_key":"'$ROUTING_KEY'","event_action":"trigger","payload":{"summary":"DR drill failed","source":"github-actions","severity":"error"}}'
